{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"faf16f85fd04fd57a5e2eef87a73c34d1cfffbd5","modified":1536633862000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1582092372000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1582092372000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1582092372000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1582092372000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1582092372000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1582092372000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1582092372000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1582092372000},{"_id":"themes/next/README.md","hash":"d3035c6961280c1b4afb3a07661f5a635ce1eaff","modified":1582092372000},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1582092372000},{"_id":"themes/next/package.json","hash":"42cadbbe64ebbc2ddf55854f9b61d28289ae9380","modified":1582092372000},{"_id":"source/.DS_Store","hash":"aa16bcadc6b4ae04587cfd1da8eb28df0229c4b1","modified":1538188054000},{"_id":"themes/next/_config.yml","hash":"030f7bc7ef9d7578eded29bbf31c90d596a0187b","modified":1582092372000},{"_id":"source/_posts/FTP+Nginx搭建图片服务器.md","hash":"bf04c4d8334995f421d36a3d836aa77e0907a8ef","modified":1583717136744},{"_id":"source/_posts/.DS_Store","hash":"ad10fa9e8bfcbb08151af8056c5a916b036d55e6","modified":1536628718000},{"_id":"source/_posts/【组成原理回顾】一、计算机发展史.md","hash":"ae03680d7979a82ca5a4d5c7edb0bb5fb350862b","modified":1583808518251},{"_id":"source/_posts/Linux简单入门.md","hash":"7215dde59e7e0e8896267db51ef8da02259f9745","modified":1583719595529},{"_id":"source/_posts/使用Jest、Enzyme等工具进行单元测试(中).md","hash":"8c147723b0ef9abb993e8a406cc9dbf0e57b9ef8","modified":1583739682867},{"_id":"source/about/index.md","hash":"a2a4c5e174d2878cb1b7ea1d8153f50a9e968f6c","modified":1536634420000},{"_id":"source/categories/index.md","hash":"cf17918829f32876ad732c0ef238e05fefad8b76","modified":1536634740000},{"_id":"source/tags/index.md","hash":"8a65128126f08994eca5ac22ef3d973c03d200fc","modified":1536634758000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1582092372000},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1582092372000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1582092356000},{"_id":"themes/next/.git/index","hash":"50de4b03e602f3f67a2ec2660ce81d9c77e7c510","modified":1583719740411},{"_id":"themes/next/.git/packed-refs","hash":"312f6d00925c1bd4b0b2ea18a7b2816d7a9ffae0","modified":1582092372000},{"_id":"source/_posts/Mac iTerm2 快捷键.md","hash":"e89a04ba5f5433ac8a97fdd2d7cef0d2e91a4ab1","modified":1583717111468},{"_id":"source/_posts/使用Jest、Enzyme等工具进行单元测试(上).md","hash":"657e09ae455f38449c7e2346e092abd26c588b95","modified":1583716924770},{"_id":"source/_posts/[转]学习web框架.md","hash":"6c760ad30be96ba3b61dfda3e6e3c57ad41fcb6d","modified":1583716915356},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1582092372000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"1b87a7d22d466d78856900bd94875944181c991a","modified":1582092372000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1582092372000},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1582092372000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1582092372000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1582092372000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1582092372000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1582092372000},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1582092372000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1582092372000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1582092372000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1582092372000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1582092372000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1582092372000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1582092372000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1582092372000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1582092372000},{"_id":"themes/next/languages/de.yml","hash":"109943f7adcd5cdbe4c6c95c9d279603f07edacb","modified":1582092372000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1582092372000},{"_id":"themes/next/languages/en.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1582092372000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1582092372000},{"_id":"themes/next/languages/es.yml","hash":"53ef4a621fd628748b8ed711fe86080e9c9c91c8","modified":1582092372000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1582092372000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1582092372000},{"_id":"themes/next/languages/fr.yml","hash":"578a30a51b9ecbbcb4c200362ad9a37ffd3272db","modified":1582092372000},{"_id":"themes/next/languages/hu.yml","hash":"074d069af9aed5ad34fa809bd058a3b9e2d01051","modified":1582092372000},{"_id":"themes/next/languages/fa.yml","hash":"a24e0cf28e9f137d0d2219498778693c3c3960b2","modified":1582092372000},{"_id":"themes/next/languages/it.yml","hash":"ba2c8f51f2f719dabe71b6053c6fe6866161ec66","modified":1582092372000},{"_id":"themes/next/languages/id.yml","hash":"6037450ecd02796e08ca2e98037845b7c30c2807","modified":1582092372000},{"_id":"themes/next/languages/nl.yml","hash":"e27b29c60d88ef4c30de291b595cf8cad639c5d1","modified":1582092372000},{"_id":"themes/next/languages/ja.yml","hash":"5e13b521201944815665bd077b65d7ce69622b81","modified":1582092372000},{"_id":"themes/next/languages/ko.yml","hash":"4aa8f3bf06e02879863b19901476cb23ecd2d709","modified":1582092372000},{"_id":"themes/next/languages/pt.yml","hash":"f7516b9d86b52c80bf63d3efc7ee6fd985205001","modified":1582092372000},{"_id":"themes/next/languages/pt-BR.yml","hash":"0660471e067d01ec80962d5721ae282aafff274d","modified":1582092372000},{"_id":"themes/next/languages/tr.yml","hash":"145d28f6f051129dc6393affe8f68cd7ba925078","modified":1582092372000},{"_id":"themes/next/languages/ru.yml","hash":"7dcb2aab65a4b202476856f3e004862334229bcb","modified":1582092372000},{"_id":"themes/next/languages/uk.yml","hash":"21a573cdf8e26d87d5e32c5555bc645983268abe","modified":1582092372000},{"_id":"themes/next/languages/zh-CN.yml","hash":"038c3a650d2e3a288be9ba6580564172c50b4289","modified":1582092372000},{"_id":"themes/next/languages/zh-TW.yml","hash":"0964e90406bbd495e901d6b9d5f10124c8cad950","modified":1582092372000},{"_id":"themes/next/languages/zh-HK.yml","hash":"2620632caa3c94022d9513ab1971d15512e737e7","modified":1582092372000},{"_id":"themes/next/languages/vi.yml","hash":"ffc144f606e171fdd8cdb41808ac36e406015a54","modified":1582092372000},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1582092372000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1582092372000},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1582092372000},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1582092372000},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1582092372000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1582092372000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1582092372000},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1582092372000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1582092356000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1582092356000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1582092356000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1582092356000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1582092356000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1582092356000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1582092356000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1582092356000},{"_id":"themes/next/.git/logs/HEAD","hash":"dd38135ecc38df42e0ef187398d27e57b1930638","modified":1582092372000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1582092356000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1582092372000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1582092356000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1582092372000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1582092356000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1582092372000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1582092372000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1582092372000},{"_id":"themes/next/docs/ru/README.md","hash":"2b3988e79d96b66640d6a98f0c0e6de9099805e6","modified":1582092372000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1582092372000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"e5f6668c3a79e4a364931b9b4e5fa92f8c771ec8","modified":1582092372000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1582092372000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1582092372000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"0c4914a5fd08f15beec71940218c814ad9a89f3f","modified":1582092372000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1582092372000},{"_id":"themes/next/layout/_macro/post.swig","hash":"a14b72e1507a770d6224943d7d86688aea0578cf","modified":1582092372000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1582092372000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1582092372000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1582092372000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1582092372000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1582092372000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1582092372000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1582092372000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1582092372000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1582092372000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1582092372000},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1582092372000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1582092372000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1582092372000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1582092372000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1582092372000},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1582092372000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1582092372000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1582092372000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1582092372000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1582092372000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1582092372000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1582092372000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1582092372000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1582092372000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1582092372000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1582092372000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1582092372000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1582092372000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1582092372000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1582092372000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1582092372000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1582092372000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1582092372000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582092372000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1582092372000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1582092372000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1582092372000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1582092372000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1582092372000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1582092372000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582092372000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582092372000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1582092372000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1582092372000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1582092372000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1582092372000},{"_id":"themes/next/source/js/algolia-search.js","hash":"f31a633c15391ce0095579735a479f3f92622eab","modified":1582092372000},{"_id":"themes/next/source/js/local-search.js","hash":"0d30f1c0e4d4a1cc26d494808f3f36132d06ae14","modified":1582092372000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1582092372000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1582092372000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1582092372000},{"_id":"themes/next/source/js/utils.js","hash":"4faf7598289774fe091f33fa693b2e6b2ca1e994","modified":1582092372000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1582092372000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1582092372000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582092372000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582092372000},{"_id":"themes/next/.git/refs/heads/master","hash":"9057f43ab45ddc88b5be4457ab6d6b12f0484a81","modified":1582092372000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1582092372000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1582092372000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1582092372000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1582092372000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"6cd12613863c3fd7a10c6a81c84f57a770f96566","modified":1582092372000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1582092372000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1582092372000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1582092372000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"14c33bd544903e74388739599fffe3ecb66ed4b0","modified":1582092372000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1582092372000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1582092372000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1582092372000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1582092372000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1582092372000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2791a8dc20a276704fc8b03f9822f76578a9152d","modified":1582092372000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1582092372000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1582092372000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1582092372000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1582092372000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1582092372000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1582092372000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1582092372000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1582092372000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1582092372000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1582092372000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1582092372000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1582092372000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1582092372000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1582092372000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1582092372000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1582092372000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1582092372000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1582092372000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1582092372000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1582092372000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1582092372000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1582092372000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1582092372000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1582092372000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1582092372000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1582092372000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1582092372000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1582092372000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"a18a9b52f58c7988c411a819518d8e7715e5fb92","modified":1582092372000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1582092372000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1582092372000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1582092372000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1582092372000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1582092372000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1582092372000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"529d752f269afcf8f64e07a1eacd6fda70fb211f","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1582092372000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1582092372000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1582092372000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1582092372000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1582092372000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1582092372000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"a239f1558d1209012ce4571cbc665fe461291e41","modified":1582092372000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1582092372000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1582092372000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1582092372000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1582092372000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1582092372000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1582092372000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1582092372000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1582092372000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"dd38135ecc38df42e0ef187398d27e57b1930638","modified":1582092372000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"8e1cc5e3b20d804a7265f945b877388bffee39eb","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a54662bd4cbbe316048a811d3b5c83fb6df63739","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"5ae608ce00ec2d7b9aa4ab2d8dfdf4a73422acc4","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"adea92b504d436780c2792af0269f8b7835525f3","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"3d52f762577afac1ab50390e555b069408370fe8","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"a406ecd03d2d3b0e160b44a42deeae1ed9aa6aa1","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b797c693378d94160121a2b8d9df0622a76cdbda","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"698f25ad68508450dd8a41f2732d2bab14f8d1fe","modified":1582092372000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"06098b8f8ea343c434c858207297a47c1275155a","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1582092372000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"dd38135ecc38df42e0ef187398d27e57b1930638","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c26c60317ae9c49ca55779ea89892db90cfbad2e","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a418cadb160a11e7203a3964aef4149a54808a5","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"5e655bc1d9e213e466af2f8358725fdc668fe52d","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1582092372000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"af182c0d1e52f94280f6108936914f04ed541eee","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"f9796139bb7cb1d7e59c9c6726e2e063f7e33024","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"60ed14e9ddcb138837ca22efb8886f9bff2a3dd2","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"521534f483440434e808f92377bc3fc73667c89a","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1582092372000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c7939407797acbd1ae0d8bae8e13b2bf045f870e","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"418890a2041e4d623e235890951143d183df6f03","modified":1582092372000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1582092372000},{"_id":"themes/next/.git/objects/pack/pack-5fc824660844bd0355d592c4844cc390243d4d01.idx","hash":"84b553e48b78dcb8a4639d3f71b7b9555bffa678","modified":1582092372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1582092372000},{"_id":"themes/next/.git/objects/pack/pack-5fc824660844bd0355d592c4844cc390243d4d01.pack","hash":"e9e97cfd5f507acf0012916abb3e457005e79937","modified":1582092372000},{"_id":"public/about/index.html","hash":"4ed8f54ba4669e44d7a71231b4f57a4df576fa01","modified":1583808292557},{"_id":"public/categories/index.html","hash":"19cccb2efc191a4e7681adf572fab495be1784ac","modified":1583808292557},{"_id":"public/tags/index.html","hash":"5d83435bb993c438f918a90f390f15632a767437","modified":1583808292558},{"_id":"public/2020/02/16/FTP+Nginx搭建图片服务器/index.html","hash":"0dac7340b2e75690639b32c0048880722757b1fb","modified":1583808292558},{"_id":"public/2018/09/14/Mac iTerm2 快捷键/index.html","hash":"4cad803456ccdfbd6fee57b9d0e8b6ab70cf70cb","modified":1583808292558},{"_id":"public/archives/index.html","hash":"c286563a9b1bba4b8cd35c705918386f23c2a6c7","modified":1583808292558},{"_id":"public/archives/2018/index.html","hash":"74310199252b2133a361b368aa975275be0671b6","modified":1583808292558},{"_id":"public/archives/2018/09/index.html","hash":"cddeb7f52c10b8aa40c327319a51ab3b470edc1b","modified":1583808292558},{"_id":"public/archives/2020/index.html","hash":"60deceae0d4e943af09a399294ea2660114920aa","modified":1583808292558},{"_id":"public/archives/2020/02/index.html","hash":"601ea89d261b6108a5c75b37e9b06e422c8547ec","modified":1583808292558},{"_id":"public/archives/2020/03/index.html","hash":"426ba78a611c062ce90ad9485f0f1dbe8ba23bf6","modified":1583808292558},{"_id":"public/categories/计算机组成原理/index.html","hash":"7fbc8dce63498994670d26002c8a00775e8e78e5","modified":1583808292558},{"_id":"public/categories/小tips/index.html","hash":"b6785e41747b25fc4346102f219dd653f2255fad","modified":1583808292558},{"_id":"public/categories/后端/index.html","hash":"4b5b47427f90c9f41c56509f02816c00b15bff4a","modified":1583808292558},{"_id":"public/categories/Linux/index.html","hash":"8becda6c0119b89e825660cae62ec5d973d25cf5","modified":1583808292558},{"_id":"public/tags/计算机组成原理/index.html","hash":"8e6def189afe73ec3f5249c9d8ceb6a1025cd526","modified":1583808292558},{"_id":"public/tags/Mac技巧/index.html","hash":"c2b4e7d26656e4dd000ea4329e9f410176141319","modified":1583808292559},{"_id":"public/tags/终端/index.html","hash":"5432a77411feb9adad02c038d4c534dfd6e9c401","modified":1583808292559},{"_id":"public/tags/后端/index.html","hash":"cd741b54aac2aa3a8bbb6eaa8764a0fca02a923a","modified":1583808292559},{"_id":"public/tags/框架/index.html","hash":"88b67b0044e9b0eae6b4ca627d8bbf377a2d314e","modified":1583808292559},{"_id":"public/tags/转载/index.html","hash":"a8988a642e9a5d2142f854de85da5e78211c27e1","modified":1583808292559},{"_id":"public/tags/Linux/index.html","hash":"0f7aec87a61eca3a9ed337d0fccb326fc6ac01af","modified":1583808292559},{"_id":"public/2020/03/05/使用Jest、Enzyme等工具进行单元测试(中)/index.html","hash":"3aca1ebbdcbc5f2ac845f22b8f4eea397f0d1dc8","modified":1583808292559},{"_id":"public/2020/03/05/使用Jest、Enzyme等工具进行单元测试(上)/index.html","hash":"6151846c3180e0d8edb2b6483f3903748576e565","modified":1583808292559},{"_id":"public/2020/02/14/【组成原理回顾】一、计算机发展史/index.html","hash":"5bf6a2bc15f6a37504c81a60d85091f9d7030822","modified":1583808539157},{"_id":"public/2018/09/13/Linux简单入门/index.html","hash":"f1b9eb2f0e002870e4378743aa8e188db95ccb66","modified":1583808292559},{"_id":"public/2018/09/11/[转]学习web框架/index.html","hash":"88a898410c939fdbe4e13d24f1316eff325b20a5","modified":1583808292559},{"_id":"public/index.html","hash":"e8c8eacde7c1fa875cc88261ff23b7c1f334e6dd","modified":1583808539158},{"_id":"public/CNAME","hash":"faf16f85fd04fd57a5e2eef87a73c34d1cfffbd5","modified":1583808292566},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1583808292567},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1583808292567},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1583808292567},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1583808292567},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1583808292567},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1583808292567},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1583808292567},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1583808292567},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1583808292567},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1583808292567},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1583808292567},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1583808292567},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1583808292567},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1583808292567},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1583808292567},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1583808292567},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1583808292567},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583808293385},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583808293386},{"_id":"public/js/algolia-search.js","hash":"f31a633c15391ce0095579735a479f3f92622eab","modified":1583808293390},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1583808293390},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1583808293390},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1583808293391},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1583808293391},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1583808293391},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1583808293391},{"_id":"public/css/main.css","hash":"3a49b72cd25538d804a6ea8b0dca4dc9a15e4293","modified":1583808293391},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583808293391},{"_id":"public/js/local-search.js","hash":"0d30f1c0e4d4a1cc26d494808f3f36132d06ae14","modified":1583808293400},{"_id":"public/js/utils.js","hash":"4faf7598289774fe091f33fa693b2e6b2ca1e994","modified":1583808293400},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1583808293400},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1583808293407},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1583808293407},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1583808293417},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1583808293417}],"Category":[{"name":"计算机组成原理","_id":"ck7lakauf00069ko7rrru2biu"},{"name":"小tips","_id":"ck7lakaum000a9ko7f6el0j8s"},{"name":"后端","_id":"ck7lakaup000e9ko74r74kkxt"},{"name":"Linux","_id":"ck7lakavh000s9ko7cdds1bw3"}],"Data":[],"Page":[{"title":"about","date":"2018-09-11T02:53:40.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-11 10:53:40\n---\n","updated":"2018-09-11T02:53:40.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7lakau800019ko7ll5w0rjo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-09-11T02:52:54.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-09-11 10:52:54\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-11T02:59:00.000Z","path":"categories/index.html","layout":"page","_id":"ck7lakaub00039ko7chj1fc2c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-09-11T02:52:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-09-11 10:52:32\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-09-11T02:59:18.000Z","path":"tags/index.html","layout":"page","_id":"ck7lakaue00059ko7detevbv6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"FTP+Nginx搭建图片服务器","_content":"\n> 由于写blog需要插入一些图片，之前用七牛云，由于七牛云需要备案，又没找到合适的（免费的）OSS。就决定先用FTP+Nginx自己搭一个。\n\n# FTP介绍\n在搭建之前我们先简单了解一下FTP协议。   \n\n主动模式  被动模式\n","source":"_posts/FTP+Nginx搭建图片服务器.md","raw":"---\ntitle: FTP+Nginx搭建图片服务器\n---\n\n> 由于写blog需要插入一些图片，之前用七牛云，由于七牛云需要备案，又没找到合适的（免费的）OSS。就决定先用FTP+Nginx自己搭一个。\n\n# FTP介绍\n在搭建之前我们先简单了解一下FTP协议。   \n\n主动模式  被动模式\n","slug":"FTP+Nginx搭建图片服务器","published":1,"date":"2020-02-16T14:21:50.000Z","updated":"2020-03-09T01:25:36.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lakau200009ko7m1025vwm","content":"<blockquote>\n<p>由于写blog需要插入一些图片，之前用七牛云，由于七牛云需要备案，又没找到合适的（免费的）OSS。就决定先用FTP+Nginx自己搭一个。</p>\n</blockquote>\n<h1 id=\"FTP介绍\"><a href=\"#FTP介绍\" class=\"headerlink\" title=\"FTP介绍\"></a>FTP介绍</h1><p>在搭建之前我们先简单了解一下FTP协议。   </p>\n<p>主动模式  被动模式</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>由于写blog需要插入一些图片，之前用七牛云，由于七牛云需要备案，又没找到合适的（免费的）OSS。就决定先用FTP+Nginx自己搭一个。</p>\n</blockquote>\n<h1 id=\"FTP介绍\"><a href=\"#FTP介绍\" class=\"headerlink\" title=\"FTP介绍\"></a>FTP介绍</h1><p>在搭建之前我们先简单了解一下FTP协议。   </p>\n<p>主动模式  被动模式</p>\n"},{"title":"【组成原理回顾】一、计算机发展史","date":"2020-02-14T07:40:20.000Z","_content":"\n> 这一章，主要是讲的冯诺依曼体系结构和简单介绍计算机的发展史。\n\n# 一、从逻辑元件的发展，看计算机硬件的发展\n\n1. 电子管时代。\n\n2. 晶体管时代。\n\n3. 中小规模集成电路时代。\n\n4. 超大规模集成电路。\n\n\n在计算机元件的更新换代中有一个著名的 **摩尔定律** ——当价格不变时，集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，性能也将提升一倍。\n\n\n# 二、 冯·诺依曼体系结构\n前面我们了解了计算机的硬件发展，计算机的种类是多种多样的。笔记本电脑、台式电脑、手机、IPad、服务器，这些都属于计算机，因为它们都遵循着，计算机祖师爷冯·诺依曼老爷子（对，是男的，男的）提出的，冯·诺依曼体系结构，也叫存储程序计算机。\n\n简单的概括一下冯老爷提出的这套理论的三个基本原则：\n\n1. 采用二进制运算\n2. 程序存储执行\n3. 有五部分组成（运算器、控制器、存储器、输入设备、输出设备）\n\n二进制作为主要涉及思想之一，主要是因为电子元件的双稳定工作的特点，二进制的采用可以简化机器的逻辑线路。   \n程序的存储执行。就意味这个这个计算机是可编程的和可存储的。就是说程序的本身是存在内存中的，根据不同的需要去加载不同的程序，来解决不同的问题。而像老式的计算器就属于不可编程的。而第一台计算机ENIAC，通过在板子上不同的插头或者接口的位置插入线路，来实现不同的功能。ENIAC属于可编程，但它不可存储。因为每次要执行与当前程序不同的程序时，需要重新插板子，所以老式的计算器和ENIAC都不属于冯·诺依曼机。\n\n冯·诺依曼机特点如下：\n1. 计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备5大部件组成。\n2. 指令和数据以同等地位存储在存储器中，并可按地址寻访。\n3. 指令和数据均用二进制代码表示。\n4. 指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。\n5. 指令在存储器内按顺序。通常，指令是顺序执行的，在特定条件下可根据运算结果或根据设定的条件改变执行顺序。\n6. 早期的冯·诺依曼机以运算器为中心，输入/输出设备通过运算器与存储器传输数据。\n\n典型冯诺依曼计算机结构\n![典型冯诺依曼计算机结构](https://s2.ax1x.com/2020/03/02/3WFOhj.md.png)\n由于大量I/O设备的速度和CPU的速度差距悬殊，现代计算机已经发展为以存储器为核心。\n![现代计算机结构](https://s2.ax1x.com/2020/03/02/3WPfVe.md.png)\n\n# 三、详细介绍功能部件\n在介绍每个功能部件之前，先通俗了解一下寄存器，内存和辅存，在知乎上有一个回答我觉得很好。\n\n寄存器就是你的口袋。身上只有那么几个，只装最常用或者马上要用的东西。\n内存就是你的背包。有时候拿点什么放到口袋里，有时候从口袋里拿出点东西放在背包里。\n辅存就是你家里的抽屉。可以放很多东西，但存取不方便。\n\n## 输入输出设备（I/O设备）\n输入输出设备是计算机与外界沟通的桥梁。这个很好理解。输入设备的主要功能是将程序和数据以机器所能识别和接受的信息形式输入计算机。而输出设备就是讲计算机处理的结果以人们所能接受的形式返回。比如鼠标、键盘就是我们常见的输入设备，而显示器就是输出设备。\nI/O设备，都是通过主板上面的南桥芯片组，来和CPU进行通讯的。\n\n## 存储器\n存储器是计算机的存储部件，用来存放程序和数据。\n存储器分为主存储器和外部存储器。主存储器就是我们常说的内存，CPU可以直接访问，而外部存储器中的信息必须调入主存储器后，才能被CPU所访问。\n\n### 主存储器的工作方式\n按存储单元的地址进行存取，这种存取方式称为按地址存取方式（相连存储器是按内容访问的）\n\n### 主存储器的基本组成\n1. 地址寄存器（MAR-Memory Address Register）\n用于寻址，其位数对应着存储单元个数，MAR为N为，则有2^N个存储单元。\n2. 数据寄存器（MDR-Memory Data Register）\nMDR的位数与存储字长相等。一般为字节的二次幂的整数倍。\n3. 存储体\n  存储体是由一个一个的存储单元构成的。一般以8位二进制（8bit）也就是一字节（1Byte）作为一个存储单元。一个存储单元所存储的二进制代码的组合叫做存储字。存储字的位数就称为存储字长。存储字长可以是1B(8bit)或是字节的偶数倍。\n4. 译码器\n5. 驱动器\n\n现代计算机。 地址寄存器和数据寄存器是放在CPU里的。分别通过地址总线和数据总线与内存通讯。\n\n## 运算器\n计算机的执行部件，用于算术运算和逻辑运算。核心为ALU（Arithmetic and Logical Unit，算数逻辑单元）。\n包含若干个通用寄存器，用于暂存操作数和中间结果，如累加器（ACC），乘商寄存器（MQ）、操作数寄存器(X)等。\n还有程序状态寄存器（PSW），也称标志寄存器，用于存放ALU运算得到的一些标志信息或者处理机的状态。如是否溢出，有无进位、结果是否为负数。\n\n## 控制器\n计算机的指挥中心。\nCU 控制单元（Control Unit）\nIR 指令寄存器，存放当前指令（InstructionRegister）。\nPC （Program Counter，程序计数器） 存放指令的地址，并且可以自动加一\n\n一般运算器和控制器集成到一个芯片上，称为中央处理器（CPU）。\n\n指令是由操作码和地址码构成\nCPU区分指令和数据的依据：指令周期的不同阶段。\n\n# 四、计算机的性能指标\n## 机器字长\n指计算机一次可以处理的二进制数，字数越长则计算机的处理速度越快，处理精度越高。（一般等于内部寄存器大小）。\n\n## 运算速度\n每秒所能执行的指令数。单位为MIPS（Million Instructions Per Second，即百万条指令每秒）\nFLOPS：每秒执行多少次浮点运算。\n\n## 时钟频率\n说到时钟频率，我们先来说一下频率这个概念。频率是单位时间内完成周期性变化的次数，是描述周期运动频繁程度的量。为了纪念物理学家赫兹，将频率单位定义为Hz。时钟周期时间为频率的倒数。\n![时钟周期时间与频率的关系](https://s2.ax1x.com/2020/03/10/8CTH6f.png)\nCPU的执行时间 = CPU时钟周期数 * CPU时钟周期时间。\nCPU时钟周期数 = 指令数 * 每条指令的平均时钟周期数（CPI）。\n\n## 主存容量\n内存储器容量的大小反映了计算机即时存储信息的能力。\n\n下面还有几个重要的性能指标：\n\n数据通路带宽：数据总线一次能够并行传递信息的位数。\n\n吞吐量：系统在单位时间内处理请求的数量。（评价计算机系统性能的综合参数）","source":"_posts/【组成原理回顾】一、计算机发展史.md","raw":"---\ntitle: 【组成原理回顾】一、计算机发展史\ndate: 2020-02-14 15:40:20\ntags:\n  - 计算机组成原理\ncategories:\n  - 计算机组成原理\n---\n\n> 这一章，主要是讲的冯诺依曼体系结构和简单介绍计算机的发展史。\n\n# 一、从逻辑元件的发展，看计算机硬件的发展\n\n1. 电子管时代。\n\n2. 晶体管时代。\n\n3. 中小规模集成电路时代。\n\n4. 超大规模集成电路。\n\n\n在计算机元件的更新换代中有一个著名的 **摩尔定律** ——当价格不变时，集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，性能也将提升一倍。\n\n\n# 二、 冯·诺依曼体系结构\n前面我们了解了计算机的硬件发展，计算机的种类是多种多样的。笔记本电脑、台式电脑、手机、IPad、服务器，这些都属于计算机，因为它们都遵循着，计算机祖师爷冯·诺依曼老爷子（对，是男的，男的）提出的，冯·诺依曼体系结构，也叫存储程序计算机。\n\n简单的概括一下冯老爷提出的这套理论的三个基本原则：\n\n1. 采用二进制运算\n2. 程序存储执行\n3. 有五部分组成（运算器、控制器、存储器、输入设备、输出设备）\n\n二进制作为主要涉及思想之一，主要是因为电子元件的双稳定工作的特点，二进制的采用可以简化机器的逻辑线路。   \n程序的存储执行。就意味这个这个计算机是可编程的和可存储的。就是说程序的本身是存在内存中的，根据不同的需要去加载不同的程序，来解决不同的问题。而像老式的计算器就属于不可编程的。而第一台计算机ENIAC，通过在板子上不同的插头或者接口的位置插入线路，来实现不同的功能。ENIAC属于可编程，但它不可存储。因为每次要执行与当前程序不同的程序时，需要重新插板子，所以老式的计算器和ENIAC都不属于冯·诺依曼机。\n\n冯·诺依曼机特点如下：\n1. 计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备5大部件组成。\n2. 指令和数据以同等地位存储在存储器中，并可按地址寻访。\n3. 指令和数据均用二进制代码表示。\n4. 指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。\n5. 指令在存储器内按顺序。通常，指令是顺序执行的，在特定条件下可根据运算结果或根据设定的条件改变执行顺序。\n6. 早期的冯·诺依曼机以运算器为中心，输入/输出设备通过运算器与存储器传输数据。\n\n典型冯诺依曼计算机结构\n![典型冯诺依曼计算机结构](https://s2.ax1x.com/2020/03/02/3WFOhj.md.png)\n由于大量I/O设备的速度和CPU的速度差距悬殊，现代计算机已经发展为以存储器为核心。\n![现代计算机结构](https://s2.ax1x.com/2020/03/02/3WPfVe.md.png)\n\n# 三、详细介绍功能部件\n在介绍每个功能部件之前，先通俗了解一下寄存器，内存和辅存，在知乎上有一个回答我觉得很好。\n\n寄存器就是你的口袋。身上只有那么几个，只装最常用或者马上要用的东西。\n内存就是你的背包。有时候拿点什么放到口袋里，有时候从口袋里拿出点东西放在背包里。\n辅存就是你家里的抽屉。可以放很多东西，但存取不方便。\n\n## 输入输出设备（I/O设备）\n输入输出设备是计算机与外界沟通的桥梁。这个很好理解。输入设备的主要功能是将程序和数据以机器所能识别和接受的信息形式输入计算机。而输出设备就是讲计算机处理的结果以人们所能接受的形式返回。比如鼠标、键盘就是我们常见的输入设备，而显示器就是输出设备。\nI/O设备，都是通过主板上面的南桥芯片组，来和CPU进行通讯的。\n\n## 存储器\n存储器是计算机的存储部件，用来存放程序和数据。\n存储器分为主存储器和外部存储器。主存储器就是我们常说的内存，CPU可以直接访问，而外部存储器中的信息必须调入主存储器后，才能被CPU所访问。\n\n### 主存储器的工作方式\n按存储单元的地址进行存取，这种存取方式称为按地址存取方式（相连存储器是按内容访问的）\n\n### 主存储器的基本组成\n1. 地址寄存器（MAR-Memory Address Register）\n用于寻址，其位数对应着存储单元个数，MAR为N为，则有2^N个存储单元。\n2. 数据寄存器（MDR-Memory Data Register）\nMDR的位数与存储字长相等。一般为字节的二次幂的整数倍。\n3. 存储体\n  存储体是由一个一个的存储单元构成的。一般以8位二进制（8bit）也就是一字节（1Byte）作为一个存储单元。一个存储单元所存储的二进制代码的组合叫做存储字。存储字的位数就称为存储字长。存储字长可以是1B(8bit)或是字节的偶数倍。\n4. 译码器\n5. 驱动器\n\n现代计算机。 地址寄存器和数据寄存器是放在CPU里的。分别通过地址总线和数据总线与内存通讯。\n\n## 运算器\n计算机的执行部件，用于算术运算和逻辑运算。核心为ALU（Arithmetic and Logical Unit，算数逻辑单元）。\n包含若干个通用寄存器，用于暂存操作数和中间结果，如累加器（ACC），乘商寄存器（MQ）、操作数寄存器(X)等。\n还有程序状态寄存器（PSW），也称标志寄存器，用于存放ALU运算得到的一些标志信息或者处理机的状态。如是否溢出，有无进位、结果是否为负数。\n\n## 控制器\n计算机的指挥中心。\nCU 控制单元（Control Unit）\nIR 指令寄存器，存放当前指令（InstructionRegister）。\nPC （Program Counter，程序计数器） 存放指令的地址，并且可以自动加一\n\n一般运算器和控制器集成到一个芯片上，称为中央处理器（CPU）。\n\n指令是由操作码和地址码构成\nCPU区分指令和数据的依据：指令周期的不同阶段。\n\n# 四、计算机的性能指标\n## 机器字长\n指计算机一次可以处理的二进制数，字数越长则计算机的处理速度越快，处理精度越高。（一般等于内部寄存器大小）。\n\n## 运算速度\n每秒所能执行的指令数。单位为MIPS（Million Instructions Per Second，即百万条指令每秒）\nFLOPS：每秒执行多少次浮点运算。\n\n## 时钟频率\n说到时钟频率，我们先来说一下频率这个概念。频率是单位时间内完成周期性变化的次数，是描述周期运动频繁程度的量。为了纪念物理学家赫兹，将频率单位定义为Hz。时钟周期时间为频率的倒数。\n![时钟周期时间与频率的关系](https://s2.ax1x.com/2020/03/10/8CTH6f.png)\nCPU的执行时间 = CPU时钟周期数 * CPU时钟周期时间。\nCPU时钟周期数 = 指令数 * 每条指令的平均时钟周期数（CPI）。\n\n## 主存容量\n内存储器容量的大小反映了计算机即时存储信息的能力。\n\n下面还有几个重要的性能指标：\n\n数据通路带宽：数据总线一次能够并行传递信息的位数。\n\n吞吐量：系统在单位时间内处理请求的数量。（评价计算机系统性能的综合参数）","slug":"【组成原理回顾】一、计算机发展史","published":1,"updated":"2020-03-10T02:48:38.251Z","_id":"ck7lakau900029ko7srhlw75b","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>这一章，主要是讲的冯诺依曼体系结构和简单介绍计算机的发展史。</p>\n</blockquote>\n<h1 id=\"一、从逻辑元件的发展，看计算机硬件的发展\"><a href=\"#一、从逻辑元件的发展，看计算机硬件的发展\" class=\"headerlink\" title=\"一、从逻辑元件的发展，看计算机硬件的发展\"></a>一、从逻辑元件的发展，看计算机硬件的发展</h1><ol>\n<li><p>电子管时代。</p>\n</li>\n<li><p>晶体管时代。</p>\n</li>\n<li><p>中小规模集成电路时代。</p>\n</li>\n<li><p>超大规模集成电路。</p>\n</li>\n</ol>\n<p>在计算机元件的更新换代中有一个著名的 <strong>摩尔定律</strong> ——当价格不变时，集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，性能也将提升一倍。</p>\n<h1 id=\"二、-冯·诺依曼体系结构\"><a href=\"#二、-冯·诺依曼体系结构\" class=\"headerlink\" title=\"二、 冯·诺依曼体系结构\"></a>二、 冯·诺依曼体系结构</h1><p>前面我们了解了计算机的硬件发展，计算机的种类是多种多样的。笔记本电脑、台式电脑、手机、IPad、服务器，这些都属于计算机，因为它们都遵循着，计算机祖师爷冯·诺依曼老爷子（对，是男的，男的）提出的，冯·诺依曼体系结构，也叫存储程序计算机。</p>\n<p>简单的概括一下冯老爷提出的这套理论的三个基本原则：</p>\n<ol>\n<li>采用二进制运算</li>\n<li>程序存储执行</li>\n<li>有五部分组成（运算器、控制器、存储器、输入设备、输出设备）</li>\n</ol>\n<p>二进制作为主要涉及思想之一，主要是因为电子元件的双稳定工作的特点，二进制的采用可以简化机器的逻辑线路。<br>程序的存储执行。就意味这个这个计算机是可编程的和可存储的。就是说程序的本身是存在内存中的，根据不同的需要去加载不同的程序，来解决不同的问题。而像老式的计算器就属于不可编程的。而第一台计算机ENIAC，通过在板子上不同的插头或者接口的位置插入线路，来实现不同的功能。ENIAC属于可编程，但它不可存储。因为每次要执行与当前程序不同的程序时，需要重新插板子，所以老式的计算器和ENIAC都不属于冯·诺依曼机。</p>\n<p>冯·诺依曼机特点如下：</p>\n<ol>\n<li>计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备5大部件组成。</li>\n<li>指令和数据以同等地位存储在存储器中，并可按地址寻访。</li>\n<li>指令和数据均用二进制代码表示。</li>\n<li>指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。</li>\n<li>指令在存储器内按顺序。通常，指令是顺序执行的，在特定条件下可根据运算结果或根据设定的条件改变执行顺序。</li>\n<li>早期的冯·诺依曼机以运算器为中心，输入/输出设备通过运算器与存储器传输数据。</li>\n</ol>\n<p>典型冯诺依曼计算机结构<br><img src=\"https://s2.ax1x.com/2020/03/02/3WFOhj.md.png\" alt=\"典型冯诺依曼计算机结构\"><br>由于大量I/O设备的速度和CPU的速度差距悬殊，现代计算机已经发展为以存储器为核心。<br><img src=\"https://s2.ax1x.com/2020/03/02/3WPfVe.md.png\" alt=\"现代计算机结构\"></p>\n<h1 id=\"三、详细介绍功能部件\"><a href=\"#三、详细介绍功能部件\" class=\"headerlink\" title=\"三、详细介绍功能部件\"></a>三、详细介绍功能部件</h1><p>在介绍每个功能部件之前，先通俗了解一下寄存器，内存和辅存，在知乎上有一个回答我觉得很好。</p>\n<p>寄存器就是你的口袋。身上只有那么几个，只装最常用或者马上要用的东西。<br>内存就是你的背包。有时候拿点什么放到口袋里，有时候从口袋里拿出点东西放在背包里。<br>辅存就是你家里的抽屉。可以放很多东西，但存取不方便。</p>\n<h2 id=\"输入输出设备（I-O设备）\"><a href=\"#输入输出设备（I-O设备）\" class=\"headerlink\" title=\"输入输出设备（I/O设备）\"></a>输入输出设备（I/O设备）</h2><p>输入输出设备是计算机与外界沟通的桥梁。这个很好理解。输入设备的主要功能是将程序和数据以机器所能识别和接受的信息形式输入计算机。而输出设备就是讲计算机处理的结果以人们所能接受的形式返回。比如鼠标、键盘就是我们常见的输入设备，而显示器就是输出设备。<br>I/O设备，都是通过主板上面的南桥芯片组，来和CPU进行通讯的。</p>\n<h2 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h2><p>存储器是计算机的存储部件，用来存放程序和数据。<br>存储器分为主存储器和外部存储器。主存储器就是我们常说的内存，CPU可以直接访问，而外部存储器中的信息必须调入主存储器后，才能被CPU所访问。</p>\n<h3 id=\"主存储器的工作方式\"><a href=\"#主存储器的工作方式\" class=\"headerlink\" title=\"主存储器的工作方式\"></a>主存储器的工作方式</h3><p>按存储单元的地址进行存取，这种存取方式称为按地址存取方式（相连存储器是按内容访问的）</p>\n<h3 id=\"主存储器的基本组成\"><a href=\"#主存储器的基本组成\" class=\"headerlink\" title=\"主存储器的基本组成\"></a>主存储器的基本组成</h3><ol>\n<li>地址寄存器（MAR-Memory Address Register）<br>用于寻址，其位数对应着存储单元个数，MAR为N为，则有2^N个存储单元。</li>\n<li>数据寄存器（MDR-Memory Data Register）<br>MDR的位数与存储字长相等。一般为字节的二次幂的整数倍。</li>\n<li>存储体<br>存储体是由一个一个的存储单元构成的。一般以8位二进制（8bit）也就是一字节（1Byte）作为一个存储单元。一个存储单元所存储的二进制代码的组合叫做存储字。存储字的位数就称为存储字长。存储字长可以是1B(8bit)或是字节的偶数倍。</li>\n<li>译码器</li>\n<li>驱动器</li>\n</ol>\n<p>现代计算机。 地址寄存器和数据寄存器是放在CPU里的。分别通过地址总线和数据总线与内存通讯。</p>\n<h2 id=\"运算器\"><a href=\"#运算器\" class=\"headerlink\" title=\"运算器\"></a>运算器</h2><p>计算机的执行部件，用于算术运算和逻辑运算。核心为ALU（Arithmetic and Logical Unit，算数逻辑单元）。<br>包含若干个通用寄存器，用于暂存操作数和中间结果，如累加器（ACC），乘商寄存器（MQ）、操作数寄存器(X)等。<br>还有程序状态寄存器（PSW），也称标志寄存器，用于存放ALU运算得到的一些标志信息或者处理机的状态。如是否溢出，有无进位、结果是否为负数。</p>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><p>计算机的指挥中心。<br>CU 控制单元（Control Unit）<br>IR 指令寄存器，存放当前指令（InstructionRegister）。<br>PC （Program Counter，程序计数器） 存放指令的地址，并且可以自动加一</p>\n<p>一般运算器和控制器集成到一个芯片上，称为中央处理器（CPU）。</p>\n<p>指令是由操作码和地址码构成<br>CPU区分指令和数据的依据：指令周期的不同阶段。</p>\n<h1 id=\"四、计算机的性能指标\"><a href=\"#四、计算机的性能指标\" class=\"headerlink\" title=\"四、计算机的性能指标\"></a>四、计算机的性能指标</h1><h2 id=\"机器字长\"><a href=\"#机器字长\" class=\"headerlink\" title=\"机器字长\"></a>机器字长</h2><p>指计算机一次可以处理的二进制数，字数越长则计算机的处理速度越快，处理精度越高。（一般等于内部寄存器大小）。</p>\n<h2 id=\"运算速度\"><a href=\"#运算速度\" class=\"headerlink\" title=\"运算速度\"></a>运算速度</h2><p>每秒所能执行的指令数。单位为MIPS（Million Instructions Per Second，即百万条指令每秒）<br>FLOPS：每秒执行多少次浮点运算。</p>\n<h2 id=\"时钟频率\"><a href=\"#时钟频率\" class=\"headerlink\" title=\"时钟频率\"></a>时钟频率</h2><p>说到时钟频率，我们先来说一下频率这个概念。频率是单位时间内完成周期性变化的次数，是描述周期运动频繁程度的量。为了纪念物理学家赫兹，将频率单位定义为Hz。时钟周期时间为频率的倒数。<br><img src=\"https://s2.ax1x.com/2020/03/10/8CTH6f.png\" alt=\"时钟周期时间与频率的关系\"><br>CPU的执行时间 = CPU时钟周期数 <em> CPU时钟周期时间。<br>CPU时钟周期数 = 指令数 </em> 每条指令的平均时钟周期数（CPI）。</p>\n<h2 id=\"主存容量\"><a href=\"#主存容量\" class=\"headerlink\" title=\"主存容量\"></a>主存容量</h2><p>内存储器容量的大小反映了计算机即时存储信息的能力。</p>\n<p>下面还有几个重要的性能指标：</p>\n<p>数据通路带宽：数据总线一次能够并行传递信息的位数。</p>\n<p>吞吐量：系统在单位时间内处理请求的数量。（评价计算机系统性能的综合参数）</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这一章，主要是讲的冯诺依曼体系结构和简单介绍计算机的发展史。</p>\n</blockquote>\n<h1 id=\"一、从逻辑元件的发展，看计算机硬件的发展\"><a href=\"#一、从逻辑元件的发展，看计算机硬件的发展\" class=\"headerlink\" title=\"一、从逻辑元件的发展，看计算机硬件的发展\"></a>一、从逻辑元件的发展，看计算机硬件的发展</h1><ol>\n<li><p>电子管时代。</p>\n</li>\n<li><p>晶体管时代。</p>\n</li>\n<li><p>中小规模集成电路时代。</p>\n</li>\n<li><p>超大规模集成电路。</p>\n</li>\n</ol>\n<p>在计算机元件的更新换代中有一个著名的 <strong>摩尔定律</strong> ——当价格不变时，集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，性能也将提升一倍。</p>\n<h1 id=\"二、-冯·诺依曼体系结构\"><a href=\"#二、-冯·诺依曼体系结构\" class=\"headerlink\" title=\"二、 冯·诺依曼体系结构\"></a>二、 冯·诺依曼体系结构</h1><p>前面我们了解了计算机的硬件发展，计算机的种类是多种多样的。笔记本电脑、台式电脑、手机、IPad、服务器，这些都属于计算机，因为它们都遵循着，计算机祖师爷冯·诺依曼老爷子（对，是男的，男的）提出的，冯·诺依曼体系结构，也叫存储程序计算机。</p>\n<p>简单的概括一下冯老爷提出的这套理论的三个基本原则：</p>\n<ol>\n<li>采用二进制运算</li>\n<li>程序存储执行</li>\n<li>有五部分组成（运算器、控制器、存储器、输入设备、输出设备）</li>\n</ol>\n<p>二进制作为主要涉及思想之一，主要是因为电子元件的双稳定工作的特点，二进制的采用可以简化机器的逻辑线路。<br>程序的存储执行。就意味这个这个计算机是可编程的和可存储的。就是说程序的本身是存在内存中的，根据不同的需要去加载不同的程序，来解决不同的问题。而像老式的计算器就属于不可编程的。而第一台计算机ENIAC，通过在板子上不同的插头或者接口的位置插入线路，来实现不同的功能。ENIAC属于可编程，但它不可存储。因为每次要执行与当前程序不同的程序时，需要重新插板子，所以老式的计算器和ENIAC都不属于冯·诺依曼机。</p>\n<p>冯·诺依曼机特点如下：</p>\n<ol>\n<li>计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备5大部件组成。</li>\n<li>指令和数据以同等地位存储在存储器中，并可按地址寻访。</li>\n<li>指令和数据均用二进制代码表示。</li>\n<li>指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。</li>\n<li>指令在存储器内按顺序。通常，指令是顺序执行的，在特定条件下可根据运算结果或根据设定的条件改变执行顺序。</li>\n<li>早期的冯·诺依曼机以运算器为中心，输入/输出设备通过运算器与存储器传输数据。</li>\n</ol>\n<p>典型冯诺依曼计算机结构<br><img src=\"https://s2.ax1x.com/2020/03/02/3WFOhj.md.png\" alt=\"典型冯诺依曼计算机结构\"><br>由于大量I/O设备的速度和CPU的速度差距悬殊，现代计算机已经发展为以存储器为核心。<br><img src=\"https://s2.ax1x.com/2020/03/02/3WPfVe.md.png\" alt=\"现代计算机结构\"></p>\n<h1 id=\"三、详细介绍功能部件\"><a href=\"#三、详细介绍功能部件\" class=\"headerlink\" title=\"三、详细介绍功能部件\"></a>三、详细介绍功能部件</h1><p>在介绍每个功能部件之前，先通俗了解一下寄存器，内存和辅存，在知乎上有一个回答我觉得很好。</p>\n<p>寄存器就是你的口袋。身上只有那么几个，只装最常用或者马上要用的东西。<br>内存就是你的背包。有时候拿点什么放到口袋里，有时候从口袋里拿出点东西放在背包里。<br>辅存就是你家里的抽屉。可以放很多东西，但存取不方便。</p>\n<h2 id=\"输入输出设备（I-O设备）\"><a href=\"#输入输出设备（I-O设备）\" class=\"headerlink\" title=\"输入输出设备（I/O设备）\"></a>输入输出设备（I/O设备）</h2><p>输入输出设备是计算机与外界沟通的桥梁。这个很好理解。输入设备的主要功能是将程序和数据以机器所能识别和接受的信息形式输入计算机。而输出设备就是讲计算机处理的结果以人们所能接受的形式返回。比如鼠标、键盘就是我们常见的输入设备，而显示器就是输出设备。<br>I/O设备，都是通过主板上面的南桥芯片组，来和CPU进行通讯的。</p>\n<h2 id=\"存储器\"><a href=\"#存储器\" class=\"headerlink\" title=\"存储器\"></a>存储器</h2><p>存储器是计算机的存储部件，用来存放程序和数据。<br>存储器分为主存储器和外部存储器。主存储器就是我们常说的内存，CPU可以直接访问，而外部存储器中的信息必须调入主存储器后，才能被CPU所访问。</p>\n<h3 id=\"主存储器的工作方式\"><a href=\"#主存储器的工作方式\" class=\"headerlink\" title=\"主存储器的工作方式\"></a>主存储器的工作方式</h3><p>按存储单元的地址进行存取，这种存取方式称为按地址存取方式（相连存储器是按内容访问的）</p>\n<h3 id=\"主存储器的基本组成\"><a href=\"#主存储器的基本组成\" class=\"headerlink\" title=\"主存储器的基本组成\"></a>主存储器的基本组成</h3><ol>\n<li>地址寄存器（MAR-Memory Address Register）<br>用于寻址，其位数对应着存储单元个数，MAR为N为，则有2^N个存储单元。</li>\n<li>数据寄存器（MDR-Memory Data Register）<br>MDR的位数与存储字长相等。一般为字节的二次幂的整数倍。</li>\n<li>存储体<br>存储体是由一个一个的存储单元构成的。一般以8位二进制（8bit）也就是一字节（1Byte）作为一个存储单元。一个存储单元所存储的二进制代码的组合叫做存储字。存储字的位数就称为存储字长。存储字长可以是1B(8bit)或是字节的偶数倍。</li>\n<li>译码器</li>\n<li>驱动器</li>\n</ol>\n<p>现代计算机。 地址寄存器和数据寄存器是放在CPU里的。分别通过地址总线和数据总线与内存通讯。</p>\n<h2 id=\"运算器\"><a href=\"#运算器\" class=\"headerlink\" title=\"运算器\"></a>运算器</h2><p>计算机的执行部件，用于算术运算和逻辑运算。核心为ALU（Arithmetic and Logical Unit，算数逻辑单元）。<br>包含若干个通用寄存器，用于暂存操作数和中间结果，如累加器（ACC），乘商寄存器（MQ）、操作数寄存器(X)等。<br>还有程序状态寄存器（PSW），也称标志寄存器，用于存放ALU运算得到的一些标志信息或者处理机的状态。如是否溢出，有无进位、结果是否为负数。</p>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><p>计算机的指挥中心。<br>CU 控制单元（Control Unit）<br>IR 指令寄存器，存放当前指令（InstructionRegister）。<br>PC （Program Counter，程序计数器） 存放指令的地址，并且可以自动加一</p>\n<p>一般运算器和控制器集成到一个芯片上，称为中央处理器（CPU）。</p>\n<p>指令是由操作码和地址码构成<br>CPU区分指令和数据的依据：指令周期的不同阶段。</p>\n<h1 id=\"四、计算机的性能指标\"><a href=\"#四、计算机的性能指标\" class=\"headerlink\" title=\"四、计算机的性能指标\"></a>四、计算机的性能指标</h1><h2 id=\"机器字长\"><a href=\"#机器字长\" class=\"headerlink\" title=\"机器字长\"></a>机器字长</h2><p>指计算机一次可以处理的二进制数，字数越长则计算机的处理速度越快，处理精度越高。（一般等于内部寄存器大小）。</p>\n<h2 id=\"运算速度\"><a href=\"#运算速度\" class=\"headerlink\" title=\"运算速度\"></a>运算速度</h2><p>每秒所能执行的指令数。单位为MIPS（Million Instructions Per Second，即百万条指令每秒）<br>FLOPS：每秒执行多少次浮点运算。</p>\n<h2 id=\"时钟频率\"><a href=\"#时钟频率\" class=\"headerlink\" title=\"时钟频率\"></a>时钟频率</h2><p>说到时钟频率，我们先来说一下频率这个概念。频率是单位时间内完成周期性变化的次数，是描述周期运动频繁程度的量。为了纪念物理学家赫兹，将频率单位定义为Hz。时钟周期时间为频率的倒数。<br><img src=\"https://s2.ax1x.com/2020/03/10/8CTH6f.png\" alt=\"时钟周期时间与频率的关系\"><br>CPU的执行时间 = CPU时钟周期数 <em> CPU时钟周期时间。<br>CPU时钟周期数 = 指令数 </em> 每条指令的平均时钟周期数（CPI）。</p>\n<h2 id=\"主存容量\"><a href=\"#主存容量\" class=\"headerlink\" title=\"主存容量\"></a>主存容量</h2><p>内存储器容量的大小反映了计算机即时存储信息的能力。</p>\n<p>下面还有几个重要的性能指标：</p>\n<p>数据通路带宽：数据总线一次能够并行传递信息的位数。</p>\n<p>吞吐量：系统在单位时间内处理请求的数量。（评价计算机系统性能的综合参数）</p>\n"},{"title":"使用Jest、Enzyme等工具进行单元测试(中)","_content":"\n## Jest 生命周期\n我们如果有一些工作是在每次跑测试用例之前或者结束的时候要做的。我们就需要使用Jest提供的`beforeEach`和`afterEach`。\n如果我们只想跑一次的话，那么我们就要用Jest提供的`beforeAll`和`afterAll`这两个函数会在所有测试用例开始之前，和全部结束之后调用。\n\n我们可以通过具体代码看一下。\n```javascript\nbeforeEach(() => {\n    console.log('beforeEach');\n})\n\nafterEach(() => {\n    console.log('afterEach');\n})\n\nbeforeAll(() => {\n    console.log('beforeAll');\n})\n\nafterAll(() => {\n    console.log('afterAll');\n})\n\ntest('test', () => {\n    console.log('test');\n})\n\ntest('test1', () => {\n    console.log('test1');\n})\n\ntest('test2', () => {\n    console.log('test2');\n})\n```\n\n输出结果\n```shell\n    beforeAll\n    beforeEach\n    test\n    afterEach\n    beforeEach\n    test1\n    afterEach\n    beforeEach\n    test2\n    afterEach\n    afterAll\n```\n通过打印的内容我们就能很直观的看到，beforeAll和afterAll在整个测试文件的开头和结尾调用一次。beforeEach和afterEach会在每个测试用例的开始和结束都会调用。\n\n\n## Jest 作用域\n\n我们可以用`describe`来将测试分组。当`after`和`before`在`describe`内部的时候，只适用于该`describe`内部的测试，但是顶级的`beforeEach`和`afterEach`也会作用在该`describe`内部的测试用例。但是顶部的`beforeEach`会比内部的先执行，顶部的`afterEach`会比内部的晚执行。具体可以看官网给的例子。\n\n```javascript\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\ntest('', () => console.log('1 - test'));\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n## Jest Mock函数\n\n\n## Jest VSCode插件","source":"_posts/使用Jest、Enzyme等工具进行单元测试(中).md","raw":"---\ntitle: 使用Jest、Enzyme等工具进行单元测试(中)\n---\n\n## Jest 生命周期\n我们如果有一些工作是在每次跑测试用例之前或者结束的时候要做的。我们就需要使用Jest提供的`beforeEach`和`afterEach`。\n如果我们只想跑一次的话，那么我们就要用Jest提供的`beforeAll`和`afterAll`这两个函数会在所有测试用例开始之前，和全部结束之后调用。\n\n我们可以通过具体代码看一下。\n```javascript\nbeforeEach(() => {\n    console.log('beforeEach');\n})\n\nafterEach(() => {\n    console.log('afterEach');\n})\n\nbeforeAll(() => {\n    console.log('beforeAll');\n})\n\nafterAll(() => {\n    console.log('afterAll');\n})\n\ntest('test', () => {\n    console.log('test');\n})\n\ntest('test1', () => {\n    console.log('test1');\n})\n\ntest('test2', () => {\n    console.log('test2');\n})\n```\n\n输出结果\n```shell\n    beforeAll\n    beforeEach\n    test\n    afterEach\n    beforeEach\n    test1\n    afterEach\n    beforeEach\n    test2\n    afterEach\n    afterAll\n```\n通过打印的内容我们就能很直观的看到，beforeAll和afterAll在整个测试文件的开头和结尾调用一次。beforeEach和afterEach会在每个测试用例的开始和结束都会调用。\n\n\n## Jest 作用域\n\n我们可以用`describe`来将测试分组。当`after`和`before`在`describe`内部的时候，只适用于该`describe`内部的测试，但是顶级的`beforeEach`和`afterEach`也会作用在该`describe`内部的测试用例。但是顶部的`beforeEach`会比内部的先执行，顶部的`afterEach`会比内部的晚执行。具体可以看官网给的例子。\n\n```javascript\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\ntest('', () => console.log('1 - test'));\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n## Jest Mock函数\n\n\n## Jest VSCode插件","slug":"使用Jest、Enzyme等工具进行单元测试(中)","published":1,"date":"2020-03-05T13:03:34.000Z","updated":"2020-03-09T07:41:22.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lakaud00049ko7czh9knqi","content":"<h2 id=\"Jest-生命周期\"><a href=\"#Jest-生命周期\" class=\"headerlink\" title=\"Jest 生命周期\"></a>Jest 生命周期</h2><p>我们如果有一些工作是在每次跑测试用例之前或者结束的时候要做的。我们就需要使用Jest提供的<code>beforeEach</code>和<code>afterEach</code>。<br>如果我们只想跑一次的话，那么我们就要用Jest提供的<code>beforeAll</code>和<code>afterAll</code>这两个函数会在所有测试用例开始之前，和全部结束之后调用。</p>\n<p>我们可以通过具体代码看一下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeEach'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'afterEach'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeAll'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'afterAll'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test1'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test1'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test2'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test2'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeAll</span><br><span class=\"line\">beforeEach</span><br><span class=\"line\">test</span><br><span class=\"line\">afterEach</span><br><span class=\"line\">beforeEach</span><br><span class=\"line\">test1</span><br><span class=\"line\">afterEach</span><br><span class=\"line\">beforeEach</span><br><span class=\"line\">test2</span><br><span class=\"line\">afterEach</span><br><span class=\"line\">afterAll</span><br></pre></td></tr></table></figure></p>\n<p>通过打印的内容我们就能很直观的看到，beforeAll和afterAll在整个测试文件的开头和结尾调用一次。beforeEach和afterEach会在每个测试用例的开始和结束都会调用。</p>\n<h2 id=\"Jest-作用域\"><a href=\"#Jest-作用域\" class=\"headerlink\" title=\"Jest 作用域\"></a>Jest 作用域</h2><p>我们可以用<code>describe</code>来将测试分组。当<code>after</code>和<code>before</code>在<code>describe</code>内部的时候，只适用于该<code>describe</code>内部的测试，但是顶级的<code>beforeEach</code>和<code>afterEach</code>也会作用在该<code>describe</code>内部的测试用例。但是顶部的<code>beforeEach</code>会比内部的先执行，顶部的<code>afterEach</code>会比内部的晚执行。具体可以看官网给的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeAll'</span>));</span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterAll'</span>));</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeEach'</span>));</span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterEach'</span>));</span><br><span class=\"line\">test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - test'</span>));</span><br><span class=\"line\">describe(<span class=\"string\">'Scoped / Nested block'</span>, () =&gt; &#123;</span><br><span class=\"line\">  beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeAll'</span>));</span><br><span class=\"line\">  afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterAll'</span>));</span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeEach'</span>));</span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterEach'</span>));</span><br><span class=\"line\">  test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - test'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterAll</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Jest-Mock函数\"><a href=\"#Jest-Mock函数\" class=\"headerlink\" title=\"Jest Mock函数\"></a>Jest Mock函数</h2><h2 id=\"Jest-VSCode插件\"><a href=\"#Jest-VSCode插件\" class=\"headerlink\" title=\"Jest VSCode插件\"></a>Jest VSCode插件</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Jest-生命周期\"><a href=\"#Jest-生命周期\" class=\"headerlink\" title=\"Jest 生命周期\"></a>Jest 生命周期</h2><p>我们如果有一些工作是在每次跑测试用例之前或者结束的时候要做的。我们就需要使用Jest提供的<code>beforeEach</code>和<code>afterEach</code>。<br>如果我们只想跑一次的话，那么我们就要用Jest提供的<code>beforeAll</code>和<code>afterAll</code>这两个函数会在所有测试用例开始之前，和全部结束之后调用。</p>\n<p>我们可以通过具体代码看一下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeEach'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'afterEach'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'beforeAll'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'afterAll'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test1'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test1'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'test2'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test2'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeAll</span><br><span class=\"line\">beforeEach</span><br><span class=\"line\">test</span><br><span class=\"line\">afterEach</span><br><span class=\"line\">beforeEach</span><br><span class=\"line\">test1</span><br><span class=\"line\">afterEach</span><br><span class=\"line\">beforeEach</span><br><span class=\"line\">test2</span><br><span class=\"line\">afterEach</span><br><span class=\"line\">afterAll</span><br></pre></td></tr></table></figure></p>\n<p>通过打印的内容我们就能很直观的看到，beforeAll和afterAll在整个测试文件的开头和结尾调用一次。beforeEach和afterEach会在每个测试用例的开始和结束都会调用。</p>\n<h2 id=\"Jest-作用域\"><a href=\"#Jest-作用域\" class=\"headerlink\" title=\"Jest 作用域\"></a>Jest 作用域</h2><p>我们可以用<code>describe</code>来将测试分组。当<code>after</code>和<code>before</code>在<code>describe</code>内部的时候，只适用于该<code>describe</code>内部的测试，但是顶级的<code>beforeEach</code>和<code>afterEach</code>也会作用在该<code>describe</code>内部的测试用例。但是顶部的<code>beforeEach</code>会比内部的先执行，顶部的<code>afterEach</code>会比内部的晚执行。具体可以看官网给的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeAll'</span>));</span><br><span class=\"line\">afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterAll'</span>));</span><br><span class=\"line\">beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - beforeEach'</span>));</span><br><span class=\"line\">afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - afterEach'</span>));</span><br><span class=\"line\">test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'1 - test'</span>));</span><br><span class=\"line\">describe(<span class=\"string\">'Scoped / Nested block'</span>, () =&gt; &#123;</span><br><span class=\"line\">  beforeAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeAll'</span>));</span><br><span class=\"line\">  afterAll(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterAll'</span>));</span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - beforeEach'</span>));</span><br><span class=\"line\">  afterEach(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - afterEach'</span>));</span><br><span class=\"line\">  test(<span class=\"string\">''</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'2 - test'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterAll</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Jest-Mock函数\"><a href=\"#Jest-Mock函数\" class=\"headerlink\" title=\"Jest Mock函数\"></a>Jest Mock函数</h2><h2 id=\"Jest-VSCode插件\"><a href=\"#Jest-VSCode插件\" class=\"headerlink\" title=\"Jest VSCode插件\"></a>Jest VSCode插件</h2>"},{"title":"Mac iTerm2 快捷键","date":"2018-09-14T02:33:01.000Z","_content":"\n> 总结一些iTerm2常用的快捷键(不断更新)\n\n## 基本操作   \n全屏 : command + enter\n查找 : command + f  \n查看历史命令 : command + ;  \n删除当前行 : ctrl + u   \n到行首 : ctrl + a  \n到行尾 : ctrl + e  \n前进后退 : ctrl + f/b (相当于前进后退)   \n上一条命令 : ctrl + p  \n搜索历史命令 : ctrl + r  \n删除当前光标字符 : ctrl + d  \n删除光标之前的字符 : ctrl + h  \n删除光标之前的单词 : ctrl + w  \n删除到文本末尾: ctrl + k  \n交换当前光标和前一个文本: ctrl + t  \n\n清屏: command + r | ctrl + l  \n\n## 标签\n\n新建标签 : command + t  \n关闭标签 : command + w  \n切换标签 : command + 数字 | command + 方向键  \n显示所有标签(可搜索): command + option + e   \n\n## 分屏   \n垂直分屏 : command + d  \n水平分屏 : command + shift + d  \n切换屏幕 : command + option + 方向键 | command + [ 和 ]  \n\n\n\n\n","source":"_posts/Mac iTerm2 快捷键.md","raw":"---\ntitle: Mac iTerm2 快捷键\ndate: 2018-09-14 10:33:01\ntags:\n  - Mac技巧\n  - 终端\ncategories:\n  - 小tips\n---\n\n> 总结一些iTerm2常用的快捷键(不断更新)\n\n## 基本操作   \n全屏 : command + enter\n查找 : command + f  \n查看历史命令 : command + ;  \n删除当前行 : ctrl + u   \n到行首 : ctrl + a  \n到行尾 : ctrl + e  \n前进后退 : ctrl + f/b (相当于前进后退)   \n上一条命令 : ctrl + p  \n搜索历史命令 : ctrl + r  \n删除当前光标字符 : ctrl + d  \n删除光标之前的字符 : ctrl + h  \n删除光标之前的单词 : ctrl + w  \n删除到文本末尾: ctrl + k  \n交换当前光标和前一个文本: ctrl + t  \n\n清屏: command + r | ctrl + l  \n\n## 标签\n\n新建标签 : command + t  \n关闭标签 : command + w  \n切换标签 : command + 数字 | command + 方向键  \n显示所有标签(可搜索): command + option + e   \n\n## 分屏   \n垂直分屏 : command + d  \n水平分屏 : command + shift + d  \n切换屏幕 : command + option + 方向键 | command + [ 和 ]  \n\n\n\n\n","slug":"Mac iTerm2 快捷键","published":1,"updated":"2020-03-09T01:25:11.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lakaui00089ko7va44zfbn","content":"<blockquote>\n<p>总结一些iTerm2常用的快捷键(不断更新)</p>\n</blockquote>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>全屏 : command + enter<br>查找 : command + f<br>查看历史命令 : command + ;<br>删除当前行 : ctrl + u<br>到行首 : ctrl + a<br>到行尾 : ctrl + e<br>前进后退 : ctrl + f/b (相当于前进后退)<br>上一条命令 : ctrl + p<br>搜索历史命令 : ctrl + r<br>删除当前光标字符 : ctrl + d<br>删除光标之前的字符 : ctrl + h<br>删除光标之前的单词 : ctrl + w<br>删除到文本末尾: ctrl + k<br>交换当前光标和前一个文本: ctrl + t  </p>\n<p>清屏: command + r | ctrl + l  </p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>新建标签 : command + t<br>关闭标签 : command + w<br>切换标签 : command + 数字 | command + 方向键<br>显示所有标签(可搜索): command + option + e   </p>\n<h2 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h2><p>垂直分屏 : command + d<br>水平分屏 : command + shift + d<br>切换屏幕 : command + option + 方向键 | command + [ 和 ]  </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>总结一些iTerm2常用的快捷键(不断更新)</p>\n</blockquote>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><p>全屏 : command + enter<br>查找 : command + f<br>查看历史命令 : command + ;<br>删除当前行 : ctrl + u<br>到行首 : ctrl + a<br>到行尾 : ctrl + e<br>前进后退 : ctrl + f/b (相当于前进后退)<br>上一条命令 : ctrl + p<br>搜索历史命令 : ctrl + r<br>删除当前光标字符 : ctrl + d<br>删除光标之前的字符 : ctrl + h<br>删除光标之前的单词 : ctrl + w<br>删除到文本末尾: ctrl + k<br>交换当前光标和前一个文本: ctrl + t  </p>\n<p>清屏: command + r | ctrl + l  </p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>新建标签 : command + t<br>关闭标签 : command + w<br>切换标签 : command + 数字 | command + 方向键<br>显示所有标签(可搜索): command + option + e   </p>\n<h2 id=\"分屏\"><a href=\"#分屏\" class=\"headerlink\" title=\"分屏\"></a>分屏</h2><p>垂直分屏 : command + d<br>水平分屏 : command + shift + d<br>切换屏幕 : command + option + 方向键 | command + [ 和 ]  </p>\n"},{"title":"[转]学习web框架","date":"2018-09-11T01:10:23.000Z","_content":"\n# 学习web框架\n\n> 本文转载过多,已经找不到原文出处,所有能找到的原文地址都无法访问,入侵必删\n\n按照这个清单，一条一条的学习，事半功倍，很快就能掌握 一共25条，即便很磨蹭，2小时也能搞定一条，25*2=50。只需要50小时就能掌握任意一种web框架\n\n各类web框架大同小异:现代web开发框架的6大元素，把握主线，就不会迷路\n\n建议把本文打印到一张A4纸，搞定一条打个勾\n\n## web框架学习列表  \n* 如何定义 url route\n* 如何组织 request handler 函数\n  1. 写一个最简单的request handler 函数\n  2. 如何从get/post请求中取出参数\n  3. 如何定义全局url 拦截函数\n  4. 如何获取/修改/存储 cookie,session数据\n  5. 如何修改/输出 http header 数据\n* 如何部部署app 程序\n\t1. 服务器部署可以参考 python web 程序的9种部署方式\n\t2. 如何配置开发环境\n\t3. 如何配置静态文件访问\n* 如何访问数据库\n\t1. 如何维护表结构的变更\n\t2. 如何定义/组织/初始化 数据表\n\t3. 如何对接orm系统和现有的表结构\n\t4. 掌握最基本的add/delete/按字段查询/count/slice/order by\n\t5. 如何直接使用sql 访问数据库  \n* 如何使用模板系统\n  1. 如何组织/访问 模板文件的目录结构\n  1. 如何在模板中嵌入代码\n  1. 模板是否支持继承结构\n  1. 模板之间如何include\n  1. 如何自定义模板函数\n* 如何通过http get/post 获取远程数据\n* 如何parse json\n* 如何parse xml\n* 如何输出为 json\n* 如何处理状态码:404和50x\n* 如何处理文件上传\n* 可选的学习项目\n  1. 发送email\n  1. log\n  1. 图片处理\n\n## 误区\n* 表单验证辅助函数，很多框架的表单验证部分实现的特别复杂，初学者完全不需要，手写代码处理就够用\n* ORM中的hasone,manytomany,onetomany关系,概念很复杂，其实只是多写/少写一个查询字段的关系，学习成本太高，初学者完全不需要理会，直接跳过\n\n## 现代web开发框架六大元素\n1. url route/map，表面看这个就是一组正则表达式，其实这是web开发框架的核心，它决定了代码的组织方式\n2. html 模版子系统\n3. orm，或者说数据库访问层\n4. form 前后端验证，表单验证是整个网站开发过程当中最复杂的一步，需要写手很多代码\n5. helper，包括：分页，cache，session,sitemap,rss,email等支持\n6. deployment 支持，简单说，这个框架起码要内置一个http server，更进一步要支持fastcgi，这样才能部署到生产环境\n","source":"_posts/[转]学习web框架.md","raw":"---\ntitle: '[转]学习web框架'\ndate: 2018-09-11 09:10:23\ntags:\n  - 后端\n  - 框架\n  - 转载\ncategories:\n  - 后端\n---\n\n# 学习web框架\n\n> 本文转载过多,已经找不到原文出处,所有能找到的原文地址都无法访问,入侵必删\n\n按照这个清单，一条一条的学习，事半功倍，很快就能掌握 一共25条，即便很磨蹭，2小时也能搞定一条，25*2=50。只需要50小时就能掌握任意一种web框架\n\n各类web框架大同小异:现代web开发框架的6大元素，把握主线，就不会迷路\n\n建议把本文打印到一张A4纸，搞定一条打个勾\n\n## web框架学习列表  \n* 如何定义 url route\n* 如何组织 request handler 函数\n  1. 写一个最简单的request handler 函数\n  2. 如何从get/post请求中取出参数\n  3. 如何定义全局url 拦截函数\n  4. 如何获取/修改/存储 cookie,session数据\n  5. 如何修改/输出 http header 数据\n* 如何部部署app 程序\n\t1. 服务器部署可以参考 python web 程序的9种部署方式\n\t2. 如何配置开发环境\n\t3. 如何配置静态文件访问\n* 如何访问数据库\n\t1. 如何维护表结构的变更\n\t2. 如何定义/组织/初始化 数据表\n\t3. 如何对接orm系统和现有的表结构\n\t4. 掌握最基本的add/delete/按字段查询/count/slice/order by\n\t5. 如何直接使用sql 访问数据库  \n* 如何使用模板系统\n  1. 如何组织/访问 模板文件的目录结构\n  1. 如何在模板中嵌入代码\n  1. 模板是否支持继承结构\n  1. 模板之间如何include\n  1. 如何自定义模板函数\n* 如何通过http get/post 获取远程数据\n* 如何parse json\n* 如何parse xml\n* 如何输出为 json\n* 如何处理状态码:404和50x\n* 如何处理文件上传\n* 可选的学习项目\n  1. 发送email\n  1. log\n  1. 图片处理\n\n## 误区\n* 表单验证辅助函数，很多框架的表单验证部分实现的特别复杂，初学者完全不需要，手写代码处理就够用\n* ORM中的hasone,manytomany,onetomany关系,概念很复杂，其实只是多写/少写一个查询字段的关系，学习成本太高，初学者完全不需要理会，直接跳过\n\n## 现代web开发框架六大元素\n1. url route/map，表面看这个就是一组正则表达式，其实这是web开发框架的核心，它决定了代码的组织方式\n2. html 模版子系统\n3. orm，或者说数据库访问层\n4. form 前后端验证，表单验证是整个网站开发过程当中最复杂的一步，需要写手很多代码\n5. helper，包括：分页，cache，session,sitemap,rss,email等支持\n6. deployment 支持，简单说，这个框架起码要内置一个http server，更进一步要支持fastcgi，这样才能部署到生产环境\n","slug":"[转]学习web框架","published":1,"updated":"2020-03-09T01:21:55.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lakauj00099ko7b9wbg991","content":"<h1 id=\"学习web框架\"><a href=\"#学习web框架\" class=\"headerlink\" title=\"学习web框架\"></a>学习web框架</h1><blockquote>\n<p>本文转载过多,已经找不到原文出处,所有能找到的原文地址都无法访问,入侵必删</p>\n</blockquote>\n<p>按照这个清单，一条一条的学习，事半功倍，很快就能掌握 一共25条，即便很磨蹭，2小时也能搞定一条，25*2=50。只需要50小时就能掌握任意一种web框架</p>\n<p>各类web框架大同小异:现代web开发框架的6大元素，把握主线，就不会迷路</p>\n<p>建议把本文打印到一张A4纸，搞定一条打个勾</p>\n<h2 id=\"web框架学习列表\"><a href=\"#web框架学习列表\" class=\"headerlink\" title=\"web框架学习列表\"></a>web框架学习列表</h2><ul>\n<li>如何定义 url route</li>\n<li>如何组织 request handler 函数<ol>\n<li>写一个最简单的request handler 函数</li>\n<li>如何从get/post请求中取出参数</li>\n<li>如何定义全局url 拦截函数</li>\n<li>如何获取/修改/存储 cookie,session数据</li>\n<li>如何修改/输出 http header 数据</li>\n</ol>\n</li>\n<li>如何部部署app 程序<ol>\n<li>服务器部署可以参考 python web 程序的9种部署方式</li>\n<li>如何配置开发环境</li>\n<li>如何配置静态文件访问</li>\n</ol>\n</li>\n<li>如何访问数据库<ol>\n<li>如何维护表结构的变更</li>\n<li>如何定义/组织/初始化 数据表</li>\n<li>如何对接orm系统和现有的表结构</li>\n<li>掌握最基本的add/delete/按字段查询/count/slice/order by</li>\n<li>如何直接使用sql 访问数据库  </li>\n</ol>\n</li>\n<li>如何使用模板系统<ol>\n<li>如何组织/访问 模板文件的目录结构</li>\n<li>如何在模板中嵌入代码</li>\n<li>模板是否支持继承结构</li>\n<li>模板之间如何include</li>\n<li>如何自定义模板函数</li>\n</ol>\n</li>\n<li>如何通过http get/post 获取远程数据</li>\n<li>如何parse json</li>\n<li>如何parse xml</li>\n<li>如何输出为 json</li>\n<li>如何处理状态码:404和50x</li>\n<li>如何处理文件上传</li>\n<li>可选的学习项目<ol>\n<li>发送email</li>\n<li>log</li>\n<li>图片处理</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"误区\"><a href=\"#误区\" class=\"headerlink\" title=\"误区\"></a>误区</h2><ul>\n<li>表单验证辅助函数，很多框架的表单验证部分实现的特别复杂，初学者完全不需要，手写代码处理就够用</li>\n<li>ORM中的hasone,manytomany,onetomany关系,概念很复杂，其实只是多写/少写一个查询字段的关系，学习成本太高，初学者完全不需要理会，直接跳过</li>\n</ul>\n<h2 id=\"现代web开发框架六大元素\"><a href=\"#现代web开发框架六大元素\" class=\"headerlink\" title=\"现代web开发框架六大元素\"></a>现代web开发框架六大元素</h2><ol>\n<li>url route/map，表面看这个就是一组正则表达式，其实这是web开发框架的核心，它决定了代码的组织方式</li>\n<li>html 模版子系统</li>\n<li>orm，或者说数据库访问层</li>\n<li>form 前后端验证，表单验证是整个网站开发过程当中最复杂的一步，需要写手很多代码</li>\n<li>helper，包括：分页，cache，session,sitemap,rss,email等支持</li>\n<li>deployment 支持，简单说，这个框架起码要内置一个http server，更进一步要支持fastcgi，这样才能部署到生产环境</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习web框架\"><a href=\"#学习web框架\" class=\"headerlink\" title=\"学习web框架\"></a>学习web框架</h1><blockquote>\n<p>本文转载过多,已经找不到原文出处,所有能找到的原文地址都无法访问,入侵必删</p>\n</blockquote>\n<p>按照这个清单，一条一条的学习，事半功倍，很快就能掌握 一共25条，即便很磨蹭，2小时也能搞定一条，25*2=50。只需要50小时就能掌握任意一种web框架</p>\n<p>各类web框架大同小异:现代web开发框架的6大元素，把握主线，就不会迷路</p>\n<p>建议把本文打印到一张A4纸，搞定一条打个勾</p>\n<h2 id=\"web框架学习列表\"><a href=\"#web框架学习列表\" class=\"headerlink\" title=\"web框架学习列表\"></a>web框架学习列表</h2><ul>\n<li>如何定义 url route</li>\n<li>如何组织 request handler 函数<ol>\n<li>写一个最简单的request handler 函数</li>\n<li>如何从get/post请求中取出参数</li>\n<li>如何定义全局url 拦截函数</li>\n<li>如何获取/修改/存储 cookie,session数据</li>\n<li>如何修改/输出 http header 数据</li>\n</ol>\n</li>\n<li>如何部部署app 程序<ol>\n<li>服务器部署可以参考 python web 程序的9种部署方式</li>\n<li>如何配置开发环境</li>\n<li>如何配置静态文件访问</li>\n</ol>\n</li>\n<li>如何访问数据库<ol>\n<li>如何维护表结构的变更</li>\n<li>如何定义/组织/初始化 数据表</li>\n<li>如何对接orm系统和现有的表结构</li>\n<li>掌握最基本的add/delete/按字段查询/count/slice/order by</li>\n<li>如何直接使用sql 访问数据库  </li>\n</ol>\n</li>\n<li>如何使用模板系统<ol>\n<li>如何组织/访问 模板文件的目录结构</li>\n<li>如何在模板中嵌入代码</li>\n<li>模板是否支持继承结构</li>\n<li>模板之间如何include</li>\n<li>如何自定义模板函数</li>\n</ol>\n</li>\n<li>如何通过http get/post 获取远程数据</li>\n<li>如何parse json</li>\n<li>如何parse xml</li>\n<li>如何输出为 json</li>\n<li>如何处理状态码:404和50x</li>\n<li>如何处理文件上传</li>\n<li>可选的学习项目<ol>\n<li>发送email</li>\n<li>log</li>\n<li>图片处理</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"误区\"><a href=\"#误区\" class=\"headerlink\" title=\"误区\"></a>误区</h2><ul>\n<li>表单验证辅助函数，很多框架的表单验证部分实现的特别复杂，初学者完全不需要，手写代码处理就够用</li>\n<li>ORM中的hasone,manytomany,onetomany关系,概念很复杂，其实只是多写/少写一个查询字段的关系，学习成本太高，初学者完全不需要理会，直接跳过</li>\n</ul>\n<h2 id=\"现代web开发框架六大元素\"><a href=\"#现代web开发框架六大元素\" class=\"headerlink\" title=\"现代web开发框架六大元素\"></a>现代web开发框架六大元素</h2><ol>\n<li>url route/map，表面看这个就是一组正则表达式，其实这是web开发框架的核心，它决定了代码的组织方式</li>\n<li>html 模版子系统</li>\n<li>orm，或者说数据库访问层</li>\n<li>form 前后端验证，表单验证是整个网站开发过程当中最复杂的一步，需要写手很多代码</li>\n<li>helper，包括：分页，cache，session,sitemap,rss,email等支持</li>\n<li>deployment 支持，简单说，这个框架起码要内置一个http server，更进一步要支持fastcgi，这样才能部署到生产环境</li>\n</ol>\n"},{"title":"Linux简单入门","date":"2018-09-13T07:40:20.000Z","_content":"\n> 本博文仅作为个人<Linux>复习使用, 并没有清楚的描述问题的细节, 主要是为了构建Linux知识体系,熟悉Linux简单操作.\n\n## 目录结构\n从Windows系统向Linux系统转变的时候,最不是习惯的就是目录结构,如果Windows不分区,全部东西都放C盘那感觉跟Linux也差不多(手动狗头)  \n\n目录名 | 说明\n- | -\n**/** | 根目录；有且只有一个根目录,Linux目录结构是一个树的结构,所有的东西都从这里开始。\n**/home** | 用户的主目录, 每个用户都有一个自己的目录, 一般都是以用户的账号命名, 主要存放个人数据。\n**/bin** | 存放最经常使用命令, 如: cat, cp, ls, mkdir, rm等。\n**/sbin** | 存放管理员的系统管理指令, 如: shutdown, reboot, 命令通常只有管理员才可以运行  \n**/usr** | 包含绝大多数的(多)用户工具和应用程序。  \n**/usr/bin** | 下面的都是系统预装的可执行程序，会随着系统升级而改变。\n**/usr/local/bin** | 目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。 \n**/usr/sbin** | 存放超级用户才能使用的应用程序   \n**/boot** | Linux的内核及引导系统程序所需要的文件目录  \n**/tmp** | 这个目录存放一些临时文件. 对于某些程序来说, 有些文件被用了一次两次之后，就不会再被用到，像这样的文件就放在这里. 有些Linux系统会定期自动对这个目录进行清理.  \n**/opt** | 这是给主机额外安装软件所摆放的目录。  \n**/etc** | 这个目录用来存放所有的系统管理所需要的配置文件和子目录.  \n\n## 常见命令   \n\n### 密码的修改与创建用户\n`passwd` —— password 命令，通过这个命令来修改当前用户密码。\n`useradd`这个命令来添加一个新的用户，注意，添加完会直接返回，需要配合passwd命令，来给这个新用户设置密码。\n\n### 万能的帮助命令   \n`man` —— manual 命令\nLinux命令太多，有时候我们记不住怎么办，这是就需要一个男人。man命令的作用就是告诉你这个命令的详情。\n在man命令中，我们用空格，d，b以及上下箭头键来实现上下翻页。按下 h 键会显示所有有用的键盘快捷键和一般用法。\n在man命令中，输入`/`之后跟想要搜索的内容进行搜索，按n或shift+n来匹配下一个或上一个。\nman命令分为9章，我们可以通过`man + 对应章节数字`来进入对应章节。\n\n序号|章节名称|说明\n-|-|-\n1|用户命令|可由任何人启动的\n2|系统调用|即由内核提供的函数\n3|例程|即库函数\n4|设备|即/dev目录下的特殊文件\n5|文件格式描述|例如/etc/passwd\n6|游戏|与游戏相关的\n7|杂项|例如宏命令包、惯例等\n8|系统管理员工具|只能由root启动\n9|其他（Linux特定的）|用来存放内核例行程序的文档\n\n`help`\n再讲help命令之前，我们首先的搞清楚一个概念。Linux的内建命令和外部命令，什么是内建命令呢。正所谓内建命令就是系统启动时就存在内存当中。所以执行效率高。而外部命令是系统的软件功能，用户需要时才从硬盘中读入内存，是磁盘中的可执行程序。\n一般用`type`命令查看该命令是内建命令还是外部命令。\n`hele 内建命令`来查看帮助，这种形式只支持内建命令，而绝大多数都支持`命令 --help`来获取帮助。\n\n`info`\ninfo命令与man命令类似。但是编排上要比man命令更好。也更加的完整\n\n`cheat`\n号称是更好用的帮助命令，它会通过简单的实例告诉你一个命令的具体用法。\n具体可以看cheat的[官网](https://github.com/cheat/cheat)\n\n### 文件管理\n目录查看\n`pwd` —— print name of current/working directory 显示当前目录名称\n`cd` —— change the shell working directory 更改当前目录操作\ncd常见用法：\n* `cd+目录路径`进入指定目录\n* `cd + -`返回上一次工作目录\n* `cd + ~`进入当前用户的家目录\n* `cd + ..`返回上一层目录\n\n`ls` —— list directory contents 查看当前目录下的文件\nls常用参数：\n* `ls -a` 全部（all）列举目录中的全部文件，包括隐藏文件（.filename）。\n* `ls -l 或者 ll` 列举目录内容的细节。\n* `ls -F` 文件类型（File type）。在每一个列举项目之后添加一个符号。这些符号包括：/ 表明是一个目录；@ 表明是到其它文件的符号链接；* 表明是一个可执行文件。\n* `ls -r`逆向（reverse）。从后向前地列举目录中的内容。\n* `ls -R`递归（recursive）。该选项递归地列举所有目录（在当前目录之下）的内容。\n* `ls -S`大小（size）。按文件大小排序。\n\n目录的创建与删除\n`mkdir` —— 用来创建指定名称的目录\n* `mkdir -p` parents 若所建立的上层目录目前尚未建立，则会一并建立上层目录；\n\n`rm` —— 删除（remove）\n* `rm -d` directory删除目录，目录中没有内容。\n* `rm -f` force略过不存在的文件，不显示任何信息，强制删除。\n* `rm -r/R` recursive同时删除该目录下的所有目录层。\n\n目录的复制、移动和重命名\n`cp` —— 复制（copy）\n* `cp -i`询问，如果目标文件已经存在，则会询问是否覆盖。\n* `cp -l`：把目标文件建立为源文件的硬链接文件，而不是复制源文件。\n* `cp -s`：把目标文件建立为源文件的软链接文件，而不是复制源文件。\n* `cp -p`：复制后目标文件保留源文件的属性（包括所有者、所属组、权限和时间）。\n* `cp -r`：递归复制，用于复制目录。\n\n`move` —— 移动move（改名）\n* `move -b`若需覆盖文件，则覆盖前先行备份。\n* `move -f`force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n* `move -i`若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n* `move -u`若目标文件已经存在，且 source 比较新，才会更新(update)\n也可以用move来重命名，如果目标文件和源文件在同一目录下，就可以用move来重命名 `move 目标文件 新文件名`。\n\n文件查看\n`tail` —— 用于显示指定文件末尾内容，一般用于查看日志。\n* `tail -f`实时监听文件变化。\n* `tail -n <number>`显示行数。\n\n`head` —— 与tail相对应，用于显示指定文件开头内容。\n* `head -n <number>`显示行数。\n\n`more` 和 `less` 这两个命令相似，都是用来查看内容比较多的文件。more命令，可以按Enter键向下逐行滚动查看，按空格键可以向下翻一屏，按b键向上翻一屏，按q键退出并返回原来的命令环境。more不能逐行向上滚动查看，而less可以，我们可以把less看做more的升级版，正所谓less is more。less可以按键盘上下方向键显示上下内容，less不必读整个文件，加载速度会比more更快。less退出后shell不会留下刚显示的内容,而more退出后会在shell上留下刚显示的内容。less可以用/和？进行向下搜索和向上搜索\n\n`cat` —— 查看文件内容\n* `cat file1 file > file`可以将多个文件合并成一个文件。   \n   \n文件创建   \n`touch` —— 一是可以来创建文件，二是可以用来修改时间戳。\n* `touch 文件名` 如果没有文件将创建一个文件。\n* `touch -d` 使用指定的日期时间，而非现在的时间。\n* `touch -t` 与-d功能相同，只是格式不同。\n* `touch -r` 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。\n\n\n### 软件安装\nLinux有两种，一种是rpm是CentOS体系，一种是deb是Ubuntu体系。\n分别用 `rpm -i` 和 `dpkg -i` 来进行安装。\n查看已安装的软件列表用 `rpm -qa` 和 `dpkg -l`。\n而删除软件用 `rpm -e` 和 `dpkg -r`命令。\n\nLinux也有自己的软件管家，CentOS下面是yum，Ubuntu下是apt-get\n\n\n### 文件的打包与压缩\n\n`tar`——打包，将所有文件整合成一个文件，方便拷贝或者移动，但并不会压缩。\n\n* `tar -c` 建立打包\n* `tar -x` 解压\n* `tar -t` 查看内容\n* `tar -r` 向压缩归档文件末尾追加文件\n* `tar -u` 更新原压缩包中的文件\n\n在Linux下可以用`gzip`和`bzip2`两个主要命令对文件进行压缩。一般都会和tar命令组合使用\nbzip2的压缩比率要比gzip的高。\n\n* `-z`用gzip的压缩方式\n* `-j`用bz2的压缩方式\n* `-v`显示所有过程\n\n切记 **`-f`** 是必须的\n* `-f`使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。\n\n### 文件与命令的查找\n\n`find` 最强大的查找命令，可以用来查找任何文件。\n`find <指定目录> <指定条件> <指定动作>`\n  - <指定目录>： 所要搜索的目录及其所有子目录。默认为当前目录。\n  - <指定条件>： 所要搜索的文件的特征。\n  - <指定动作>： 对搜索结果进行特定的处理。\n\n`locate` 它要比find搜索快得多，因为它不搜索任何目录，而去搜索一个数据库，这个数据库中含有本地所有文件信息。但是这个数据库每天更新一次会导致查不到最新变动过的文件。要避免这个问题，可以在使用locate之前先使用 **` updatedb`** 命令来手动更新数据库。\n\n`whereis` 该命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。\n\n`which` 在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 \n\n","source":"_posts/Linux简单入门.md","raw":"---\ntitle: Linux简单入门\ndate: 2018-09-13 15:40:20\ntags:\n  - Linux\ncategories:\n  - Linux\n---\n\n> 本博文仅作为个人<Linux>复习使用, 并没有清楚的描述问题的细节, 主要是为了构建Linux知识体系,熟悉Linux简单操作.\n\n## 目录结构\n从Windows系统向Linux系统转变的时候,最不是习惯的就是目录结构,如果Windows不分区,全部东西都放C盘那感觉跟Linux也差不多(手动狗头)  \n\n目录名 | 说明\n- | -\n**/** | 根目录；有且只有一个根目录,Linux目录结构是一个树的结构,所有的东西都从这里开始。\n**/home** | 用户的主目录, 每个用户都有一个自己的目录, 一般都是以用户的账号命名, 主要存放个人数据。\n**/bin** | 存放最经常使用命令, 如: cat, cp, ls, mkdir, rm等。\n**/sbin** | 存放管理员的系统管理指令, 如: shutdown, reboot, 命令通常只有管理员才可以运行  \n**/usr** | 包含绝大多数的(多)用户工具和应用程序。  \n**/usr/bin** | 下面的都是系统预装的可执行程序，会随着系统升级而改变。\n**/usr/local/bin** | 目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。 \n**/usr/sbin** | 存放超级用户才能使用的应用程序   \n**/boot** | Linux的内核及引导系统程序所需要的文件目录  \n**/tmp** | 这个目录存放一些临时文件. 对于某些程序来说, 有些文件被用了一次两次之后，就不会再被用到，像这样的文件就放在这里. 有些Linux系统会定期自动对这个目录进行清理.  \n**/opt** | 这是给主机额外安装软件所摆放的目录。  \n**/etc** | 这个目录用来存放所有的系统管理所需要的配置文件和子目录.  \n\n## 常见命令   \n\n### 密码的修改与创建用户\n`passwd` —— password 命令，通过这个命令来修改当前用户密码。\n`useradd`这个命令来添加一个新的用户，注意，添加完会直接返回，需要配合passwd命令，来给这个新用户设置密码。\n\n### 万能的帮助命令   \n`man` —— manual 命令\nLinux命令太多，有时候我们记不住怎么办，这是就需要一个男人。man命令的作用就是告诉你这个命令的详情。\n在man命令中，我们用空格，d，b以及上下箭头键来实现上下翻页。按下 h 键会显示所有有用的键盘快捷键和一般用法。\n在man命令中，输入`/`之后跟想要搜索的内容进行搜索，按n或shift+n来匹配下一个或上一个。\nman命令分为9章，我们可以通过`man + 对应章节数字`来进入对应章节。\n\n序号|章节名称|说明\n-|-|-\n1|用户命令|可由任何人启动的\n2|系统调用|即由内核提供的函数\n3|例程|即库函数\n4|设备|即/dev目录下的特殊文件\n5|文件格式描述|例如/etc/passwd\n6|游戏|与游戏相关的\n7|杂项|例如宏命令包、惯例等\n8|系统管理员工具|只能由root启动\n9|其他（Linux特定的）|用来存放内核例行程序的文档\n\n`help`\n再讲help命令之前，我们首先的搞清楚一个概念。Linux的内建命令和外部命令，什么是内建命令呢。正所谓内建命令就是系统启动时就存在内存当中。所以执行效率高。而外部命令是系统的软件功能，用户需要时才从硬盘中读入内存，是磁盘中的可执行程序。\n一般用`type`命令查看该命令是内建命令还是外部命令。\n`hele 内建命令`来查看帮助，这种形式只支持内建命令，而绝大多数都支持`命令 --help`来获取帮助。\n\n`info`\ninfo命令与man命令类似。但是编排上要比man命令更好。也更加的完整\n\n`cheat`\n号称是更好用的帮助命令，它会通过简单的实例告诉你一个命令的具体用法。\n具体可以看cheat的[官网](https://github.com/cheat/cheat)\n\n### 文件管理\n目录查看\n`pwd` —— print name of current/working directory 显示当前目录名称\n`cd` —— change the shell working directory 更改当前目录操作\ncd常见用法：\n* `cd+目录路径`进入指定目录\n* `cd + -`返回上一次工作目录\n* `cd + ~`进入当前用户的家目录\n* `cd + ..`返回上一层目录\n\n`ls` —— list directory contents 查看当前目录下的文件\nls常用参数：\n* `ls -a` 全部（all）列举目录中的全部文件，包括隐藏文件（.filename）。\n* `ls -l 或者 ll` 列举目录内容的细节。\n* `ls -F` 文件类型（File type）。在每一个列举项目之后添加一个符号。这些符号包括：/ 表明是一个目录；@ 表明是到其它文件的符号链接；* 表明是一个可执行文件。\n* `ls -r`逆向（reverse）。从后向前地列举目录中的内容。\n* `ls -R`递归（recursive）。该选项递归地列举所有目录（在当前目录之下）的内容。\n* `ls -S`大小（size）。按文件大小排序。\n\n目录的创建与删除\n`mkdir` —— 用来创建指定名称的目录\n* `mkdir -p` parents 若所建立的上层目录目前尚未建立，则会一并建立上层目录；\n\n`rm` —— 删除（remove）\n* `rm -d` directory删除目录，目录中没有内容。\n* `rm -f` force略过不存在的文件，不显示任何信息，强制删除。\n* `rm -r/R` recursive同时删除该目录下的所有目录层。\n\n目录的复制、移动和重命名\n`cp` —— 复制（copy）\n* `cp -i`询问，如果目标文件已经存在，则会询问是否覆盖。\n* `cp -l`：把目标文件建立为源文件的硬链接文件，而不是复制源文件。\n* `cp -s`：把目标文件建立为源文件的软链接文件，而不是复制源文件。\n* `cp -p`：复制后目标文件保留源文件的属性（包括所有者、所属组、权限和时间）。\n* `cp -r`：递归复制，用于复制目录。\n\n`move` —— 移动move（改名）\n* `move -b`若需覆盖文件，则覆盖前先行备份。\n* `move -f`force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；\n* `move -i`若目标文件 (destination) 已经存在时，就会询问是否覆盖！\n* `move -u`若目标文件已经存在，且 source 比较新，才会更新(update)\n也可以用move来重命名，如果目标文件和源文件在同一目录下，就可以用move来重命名 `move 目标文件 新文件名`。\n\n文件查看\n`tail` —— 用于显示指定文件末尾内容，一般用于查看日志。\n* `tail -f`实时监听文件变化。\n* `tail -n <number>`显示行数。\n\n`head` —— 与tail相对应，用于显示指定文件开头内容。\n* `head -n <number>`显示行数。\n\n`more` 和 `less` 这两个命令相似，都是用来查看内容比较多的文件。more命令，可以按Enter键向下逐行滚动查看，按空格键可以向下翻一屏，按b键向上翻一屏，按q键退出并返回原来的命令环境。more不能逐行向上滚动查看，而less可以，我们可以把less看做more的升级版，正所谓less is more。less可以按键盘上下方向键显示上下内容，less不必读整个文件，加载速度会比more更快。less退出后shell不会留下刚显示的内容,而more退出后会在shell上留下刚显示的内容。less可以用/和？进行向下搜索和向上搜索\n\n`cat` —— 查看文件内容\n* `cat file1 file > file`可以将多个文件合并成一个文件。   \n   \n文件创建   \n`touch` —— 一是可以来创建文件，二是可以用来修改时间戳。\n* `touch 文件名` 如果没有文件将创建一个文件。\n* `touch -d` 使用指定的日期时间，而非现在的时间。\n* `touch -t` 与-d功能相同，只是格式不同。\n* `touch -r` 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。\n\n\n### 软件安装\nLinux有两种，一种是rpm是CentOS体系，一种是deb是Ubuntu体系。\n分别用 `rpm -i` 和 `dpkg -i` 来进行安装。\n查看已安装的软件列表用 `rpm -qa` 和 `dpkg -l`。\n而删除软件用 `rpm -e` 和 `dpkg -r`命令。\n\nLinux也有自己的软件管家，CentOS下面是yum，Ubuntu下是apt-get\n\n\n### 文件的打包与压缩\n\n`tar`——打包，将所有文件整合成一个文件，方便拷贝或者移动，但并不会压缩。\n\n* `tar -c` 建立打包\n* `tar -x` 解压\n* `tar -t` 查看内容\n* `tar -r` 向压缩归档文件末尾追加文件\n* `tar -u` 更新原压缩包中的文件\n\n在Linux下可以用`gzip`和`bzip2`两个主要命令对文件进行压缩。一般都会和tar命令组合使用\nbzip2的压缩比率要比gzip的高。\n\n* `-z`用gzip的压缩方式\n* `-j`用bz2的压缩方式\n* `-v`显示所有过程\n\n切记 **`-f`** 是必须的\n* `-f`使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。\n\n### 文件与命令的查找\n\n`find` 最强大的查找命令，可以用来查找任何文件。\n`find <指定目录> <指定条件> <指定动作>`\n  - <指定目录>： 所要搜索的目录及其所有子目录。默认为当前目录。\n  - <指定条件>： 所要搜索的文件的特征。\n  - <指定动作>： 对搜索结果进行特定的处理。\n\n`locate` 它要比find搜索快得多，因为它不搜索任何目录，而去搜索一个数据库，这个数据库中含有本地所有文件信息。但是这个数据库每天更新一次会导致查不到最新变动过的文件。要避免这个问题，可以在使用locate之前先使用 **` updatedb`** 命令来手动更新数据库。\n\n`whereis` 该命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。\n\n`which` 在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 \n\n","slug":"Linux简单入门","published":1,"updated":"2020-03-09T02:06:35.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lakava000q9ko7z515rpn6","content":"<blockquote>\n<p>本博文仅作为个人<linux>复习使用, 并没有清楚的描述问题的细节, 主要是为了构建Linux知识体系,熟悉Linux简单操作.</linux></p>\n</blockquote>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>从Windows系统向Linux系统转变的时候,最不是习惯的就是目录结构,如果Windows不分区,全部东西都放C盘那感觉跟Linux也差不多(手动狗头)  </p>\n<table>\n<thead>\n<tr>\n<th>目录名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>/</strong></td>\n<td>根目录；有且只有一个根目录,Linux目录结构是一个树的结构,所有的东西都从这里开始。</td>\n</tr>\n<tr>\n<td><strong>/home</strong></td>\n<td>用户的主目录, 每个用户都有一个自己的目录, 一般都是以用户的账号命名, 主要存放个人数据。</td>\n</tr>\n<tr>\n<td><strong>/bin</strong></td>\n<td>存放最经常使用命令, 如: cat, cp, ls, mkdir, rm等。</td>\n</tr>\n<tr>\n<td><strong>/sbin</strong></td>\n<td>存放管理员的系统管理指令, 如: shutdown, reboot, 命令通常只有管理员才可以运行  </td>\n</tr>\n<tr>\n<td><strong>/usr</strong></td>\n<td>包含绝大多数的(多)用户工具和应用程序。  </td>\n</tr>\n<tr>\n<td><strong>/usr/bin</strong></td>\n<td>下面的都是系统预装的可执行程序，会随着系统升级而改变。</td>\n</tr>\n<tr>\n<td><strong>/usr/local/bin</strong></td>\n<td>目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。 </td>\n</tr>\n<tr>\n<td><strong>/usr/sbin</strong></td>\n<td>存放超级用户才能使用的应用程序   </td>\n</tr>\n<tr>\n<td><strong>/boot</strong></td>\n<td>Linux的内核及引导系统程序所需要的文件目录  </td>\n</tr>\n<tr>\n<td><strong>/tmp</strong></td>\n<td>这个目录存放一些临时文件. 对于某些程序来说, 有些文件被用了一次两次之后，就不会再被用到，像这样的文件就放在这里. 有些Linux系统会定期自动对这个目录进行清理.  </td>\n</tr>\n<tr>\n<td><strong>/opt</strong></td>\n<td>这是给主机额外安装软件所摆放的目录。  </td>\n</tr>\n<tr>\n<td><strong>/etc</strong></td>\n<td>这个目录用来存放所有的系统管理所需要的配置文件和子目录.  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h2><h3 id=\"密码的修改与创建用户\"><a href=\"#密码的修改与创建用户\" class=\"headerlink\" title=\"密码的修改与创建用户\"></a>密码的修改与创建用户</h3><p><code>passwd</code> —— password 命令，通过这个命令来修改当前用户密码。<br><code>useradd</code>这个命令来添加一个新的用户，注意，添加完会直接返回，需要配合passwd命令，来给这个新用户设置密码。</p>\n<h3 id=\"万能的帮助命令\"><a href=\"#万能的帮助命令\" class=\"headerlink\" title=\"万能的帮助命令\"></a>万能的帮助命令</h3><p><code>man</code> —— manual 命令<br>Linux命令太多，有时候我们记不住怎么办，这是就需要一个男人。man命令的作用就是告诉你这个命令的详情。<br>在man命令中，我们用空格，d，b以及上下箭头键来实现上下翻页。按下 h 键会显示所有有用的键盘快捷键和一般用法。<br>在man命令中，输入<code>/</code>之后跟想要搜索的内容进行搜索，按n或shift+n来匹配下一个或上一个。<br>man命令分为9章，我们可以通过<code>man + 对应章节数字</code>来进入对应章节。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>章节名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>用户命令</td>\n<td>可由任何人启动的</td>\n</tr>\n<tr>\n<td>2</td>\n<td>系统调用</td>\n<td>即由内核提供的函数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>例程</td>\n<td>即库函数</td>\n</tr>\n<tr>\n<td>4</td>\n<td>设备</td>\n<td>即/dev目录下的特殊文件</td>\n</tr>\n<tr>\n<td>5</td>\n<td>文件格式描述</td>\n<td>例如/etc/passwd</td>\n</tr>\n<tr>\n<td>6</td>\n<td>游戏</td>\n<td>与游戏相关的</td>\n</tr>\n<tr>\n<td>7</td>\n<td>杂项</td>\n<td>例如宏命令包、惯例等</td>\n</tr>\n<tr>\n<td>8</td>\n<td>系统管理员工具</td>\n<td>只能由root启动</td>\n</tr>\n<tr>\n<td>9</td>\n<td>其他（Linux特定的）</td>\n<td>用来存放内核例行程序的文档</td>\n</tr>\n</tbody>\n</table>\n<p><code>help</code><br>再讲help命令之前，我们首先的搞清楚一个概念。Linux的内建命令和外部命令，什么是内建命令呢。正所谓内建命令就是系统启动时就存在内存当中。所以执行效率高。而外部命令是系统的软件功能，用户需要时才从硬盘中读入内存，是磁盘中的可执行程序。<br>一般用<code>type</code>命令查看该命令是内建命令还是外部命令。<br><code>hele 内建命令</code>来查看帮助，这种形式只支持内建命令，而绝大多数都支持<code>命令 --help</code>来获取帮助。</p>\n<p><code>info</code><br>info命令与man命令类似。但是编排上要比man命令更好。也更加的完整</p>\n<p><code>cheat</code><br>号称是更好用的帮助命令，它会通过简单的实例告诉你一个命令的具体用法。<br>具体可以看cheat的<a href=\"https://github.com/cheat/cheat\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><p>目录查看<br><code>pwd</code> —— print name of current/working directory 显示当前目录名称<br><code>cd</code> —— change the shell working directory 更改当前目录操作<br>cd常见用法：</p>\n<ul>\n<li><code>cd+目录路径</code>进入指定目录</li>\n<li><code>cd + -</code>返回上一次工作目录</li>\n<li><code>cd + ~</code>进入当前用户的家目录</li>\n<li><code>cd + ..</code>返回上一层目录</li>\n</ul>\n<p><code>ls</code> —— list directory contents 查看当前目录下的文件<br>ls常用参数：</p>\n<ul>\n<li><code>ls -a</code> 全部（all）列举目录中的全部文件，包括隐藏文件（.filename）。</li>\n<li><code>ls -l 或者 ll</code> 列举目录内容的细节。</li>\n<li><code>ls -F</code> 文件类型（File type）。在每一个列举项目之后添加一个符号。这些符号包括：/ 表明是一个目录；@ 表明是到其它文件的符号链接；* 表明是一个可执行文件。</li>\n<li><code>ls -r</code>逆向（reverse）。从后向前地列举目录中的内容。</li>\n<li><code>ls -R</code>递归（recursive）。该选项递归地列举所有目录（在当前目录之下）的内容。</li>\n<li><code>ls -S</code>大小（size）。按文件大小排序。</li>\n</ul>\n<p>目录的创建与删除<br><code>mkdir</code> —— 用来创建指定名称的目录</p>\n<ul>\n<li><code>mkdir -p</code> parents 若所建立的上层目录目前尚未建立，则会一并建立上层目录；</li>\n</ul>\n<p><code>rm</code> —— 删除（remove）</p>\n<ul>\n<li><code>rm -d</code> directory删除目录，目录中没有内容。</li>\n<li><code>rm -f</code> force略过不存在的文件，不显示任何信息，强制删除。</li>\n<li><code>rm -r/R</code> recursive同时删除该目录下的所有目录层。</li>\n</ul>\n<p>目录的复制、移动和重命名<br><code>cp</code> —— 复制（copy）</p>\n<ul>\n<li><code>cp -i</code>询问，如果目标文件已经存在，则会询问是否覆盖。</li>\n<li><code>cp -l</code>：把目标文件建立为源文件的硬链接文件，而不是复制源文件。</li>\n<li><code>cp -s</code>：把目标文件建立为源文件的软链接文件，而不是复制源文件。</li>\n<li><code>cp -p</code>：复制后目标文件保留源文件的属性（包括所有者、所属组、权限和时间）。</li>\n<li><code>cp -r</code>：递归复制，用于复制目录。</li>\n</ul>\n<p><code>move</code> —— 移动move（改名）</p>\n<ul>\n<li><code>move -b</code>若需覆盖文件，则覆盖前先行备份。</li>\n<li><code>move -f</code>force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>\n<li><code>move -i</code>若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>\n<li><code>move -u</code>若目标文件已经存在，且 source 比较新，才会更新(update)<br>也可以用move来重命名，如果目标文件和源文件在同一目录下，就可以用move来重命名 <code>move 目标文件 新文件名</code>。</li>\n</ul>\n<p>文件查看<br><code>tail</code> —— 用于显示指定文件末尾内容，一般用于查看日志。</p>\n<ul>\n<li><code>tail -f</code>实时监听文件变化。</li>\n<li><code>tail -n &lt;number&gt;</code>显示行数。</li>\n</ul>\n<p><code>head</code> —— 与tail相对应，用于显示指定文件开头内容。</p>\n<ul>\n<li><code>head -n &lt;number&gt;</code>显示行数。</li>\n</ul>\n<p><code>more</code> 和 <code>less</code> 这两个命令相似，都是用来查看内容比较多的文件。more命令，可以按Enter键向下逐行滚动查看，按空格键可以向下翻一屏，按b键向上翻一屏，按q键退出并返回原来的命令环境。more不能逐行向上滚动查看，而less可以，我们可以把less看做more的升级版，正所谓less is more。less可以按键盘上下方向键显示上下内容，less不必读整个文件，加载速度会比more更快。less退出后shell不会留下刚显示的内容,而more退出后会在shell上留下刚显示的内容。less可以用/和？进行向下搜索和向上搜索</p>\n<p><code>cat</code> —— 查看文件内容</p>\n<ul>\n<li><code>cat file1 file &gt; file</code>可以将多个文件合并成一个文件。   </li>\n</ul>\n<p>文件创建<br><code>touch</code> —— 一是可以来创建文件，二是可以用来修改时间戳。</p>\n<ul>\n<li><code>touch 文件名</code> 如果没有文件将创建一个文件。</li>\n<li><code>touch -d</code> 使用指定的日期时间，而非现在的时间。</li>\n<li><code>touch -t</code> 与-d功能相同，只是格式不同。</li>\n<li><code>touch -r</code> 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。</li>\n</ul>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><p>Linux有两种，一种是rpm是CentOS体系，一种是deb是Ubuntu体系。<br>分别用 <code>rpm -i</code> 和 <code>dpkg -i</code> 来进行安装。<br>查看已安装的软件列表用 <code>rpm -qa</code> 和 <code>dpkg -l</code>。<br>而删除软件用 <code>rpm -e</code> 和 <code>dpkg -r</code>命令。</p>\n<p>Linux也有自己的软件管家，CentOS下面是yum，Ubuntu下是apt-get</p>\n<h3 id=\"文件的打包与压缩\"><a href=\"#文件的打包与压缩\" class=\"headerlink\" title=\"文件的打包与压缩\"></a>文件的打包与压缩</h3><p><code>tar</code>——打包，将所有文件整合成一个文件，方便拷贝或者移动，但并不会压缩。</p>\n<ul>\n<li><code>tar -c</code> 建立打包</li>\n<li><code>tar -x</code> 解压</li>\n<li><code>tar -t</code> 查看内容</li>\n<li><code>tar -r</code> 向压缩归档文件末尾追加文件</li>\n<li><code>tar -u</code> 更新原压缩包中的文件</li>\n</ul>\n<p>在Linux下可以用<code>gzip</code>和<code>bzip2</code>两个主要命令对文件进行压缩。一般都会和tar命令组合使用<br>bzip2的压缩比率要比gzip的高。</p>\n<ul>\n<li><code>-z</code>用gzip的压缩方式</li>\n<li><code>-j</code>用bz2的压缩方式</li>\n<li><code>-v</code>显示所有过程</li>\n</ul>\n<p>切记 <strong><code>-f</code></strong> 是必须的</p>\n<ul>\n<li><code>-f</code>使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</li>\n</ul>\n<h3 id=\"文件与命令的查找\"><a href=\"#文件与命令的查找\" class=\"headerlink\" title=\"文件与命令的查找\"></a>文件与命令的查找</h3><p><code>find</code> 最强大的查找命令，可以用来查找任何文件。<br><code>find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;</code></p>\n<ul>\n<li>&lt;指定目录&gt;： 所要搜索的目录及其所有子目录。默认为当前目录。</li>\n<li>&lt;指定条件&gt;： 所要搜索的文件的特征。</li>\n<li>&lt;指定动作&gt;： 对搜索结果进行特定的处理。</li>\n</ul>\n<p><code>locate</code> 它要比find搜索快得多，因为它不搜索任何目录，而去搜索一个数据库，这个数据库中含有本地所有文件信息。但是这个数据库每天更新一次会导致查不到最新变动过的文件。要避免这个问题，可以在使用locate之前先使用 <strong><code>updatedb</code></strong> 命令来手动更新数据库。</p>\n<p><code>whereis</code> 该命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p>\n<p><code>which</code> 在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本博文仅作为个人<linux>复习使用, 并没有清楚的描述问题的细节, 主要是为了构建Linux知识体系,熟悉Linux简单操作.</linux></p>\n</blockquote>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>从Windows系统向Linux系统转变的时候,最不是习惯的就是目录结构,如果Windows不分区,全部东西都放C盘那感觉跟Linux也差不多(手动狗头)  </p>\n<table>\n<thead>\n<tr>\n<th>目录名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>/</strong></td>\n<td>根目录；有且只有一个根目录,Linux目录结构是一个树的结构,所有的东西都从这里开始。</td>\n</tr>\n<tr>\n<td><strong>/home</strong></td>\n<td>用户的主目录, 每个用户都有一个自己的目录, 一般都是以用户的账号命名, 主要存放个人数据。</td>\n</tr>\n<tr>\n<td><strong>/bin</strong></td>\n<td>存放最经常使用命令, 如: cat, cp, ls, mkdir, rm等。</td>\n</tr>\n<tr>\n<td><strong>/sbin</strong></td>\n<td>存放管理员的系统管理指令, 如: shutdown, reboot, 命令通常只有管理员才可以运行  </td>\n</tr>\n<tr>\n<td><strong>/usr</strong></td>\n<td>包含绝大多数的(多)用户工具和应用程序。  </td>\n</tr>\n<tr>\n<td><strong>/usr/bin</strong></td>\n<td>下面的都是系统预装的可执行程序，会随着系统升级而改变。</td>\n</tr>\n<tr>\n<td><strong>/usr/local/bin</strong></td>\n<td>目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。 </td>\n</tr>\n<tr>\n<td><strong>/usr/sbin</strong></td>\n<td>存放超级用户才能使用的应用程序   </td>\n</tr>\n<tr>\n<td><strong>/boot</strong></td>\n<td>Linux的内核及引导系统程序所需要的文件目录  </td>\n</tr>\n<tr>\n<td><strong>/tmp</strong></td>\n<td>这个目录存放一些临时文件. 对于某些程序来说, 有些文件被用了一次两次之后，就不会再被用到，像这样的文件就放在这里. 有些Linux系统会定期自动对这个目录进行清理.  </td>\n</tr>\n<tr>\n<td><strong>/opt</strong></td>\n<td>这是给主机额外安装软件所摆放的目录。  </td>\n</tr>\n<tr>\n<td><strong>/etc</strong></td>\n<td>这个目录用来存放所有的系统管理所需要的配置文件和子目录.  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h2><h3 id=\"密码的修改与创建用户\"><a href=\"#密码的修改与创建用户\" class=\"headerlink\" title=\"密码的修改与创建用户\"></a>密码的修改与创建用户</h3><p><code>passwd</code> —— password 命令，通过这个命令来修改当前用户密码。<br><code>useradd</code>这个命令来添加一个新的用户，注意，添加完会直接返回，需要配合passwd命令，来给这个新用户设置密码。</p>\n<h3 id=\"万能的帮助命令\"><a href=\"#万能的帮助命令\" class=\"headerlink\" title=\"万能的帮助命令\"></a>万能的帮助命令</h3><p><code>man</code> —— manual 命令<br>Linux命令太多，有时候我们记不住怎么办，这是就需要一个男人。man命令的作用就是告诉你这个命令的详情。<br>在man命令中，我们用空格，d，b以及上下箭头键来实现上下翻页。按下 h 键会显示所有有用的键盘快捷键和一般用法。<br>在man命令中，输入<code>/</code>之后跟想要搜索的内容进行搜索，按n或shift+n来匹配下一个或上一个。<br>man命令分为9章，我们可以通过<code>man + 对应章节数字</code>来进入对应章节。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>章节名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>用户命令</td>\n<td>可由任何人启动的</td>\n</tr>\n<tr>\n<td>2</td>\n<td>系统调用</td>\n<td>即由内核提供的函数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>例程</td>\n<td>即库函数</td>\n</tr>\n<tr>\n<td>4</td>\n<td>设备</td>\n<td>即/dev目录下的特殊文件</td>\n</tr>\n<tr>\n<td>5</td>\n<td>文件格式描述</td>\n<td>例如/etc/passwd</td>\n</tr>\n<tr>\n<td>6</td>\n<td>游戏</td>\n<td>与游戏相关的</td>\n</tr>\n<tr>\n<td>7</td>\n<td>杂项</td>\n<td>例如宏命令包、惯例等</td>\n</tr>\n<tr>\n<td>8</td>\n<td>系统管理员工具</td>\n<td>只能由root启动</td>\n</tr>\n<tr>\n<td>9</td>\n<td>其他（Linux特定的）</td>\n<td>用来存放内核例行程序的文档</td>\n</tr>\n</tbody>\n</table>\n<p><code>help</code><br>再讲help命令之前，我们首先的搞清楚一个概念。Linux的内建命令和外部命令，什么是内建命令呢。正所谓内建命令就是系统启动时就存在内存当中。所以执行效率高。而外部命令是系统的软件功能，用户需要时才从硬盘中读入内存，是磁盘中的可执行程序。<br>一般用<code>type</code>命令查看该命令是内建命令还是外部命令。<br><code>hele 内建命令</code>来查看帮助，这种形式只支持内建命令，而绝大多数都支持<code>命令 --help</code>来获取帮助。</p>\n<p><code>info</code><br>info命令与man命令类似。但是编排上要比man命令更好。也更加的完整</p>\n<p><code>cheat</code><br>号称是更好用的帮助命令，它会通过简单的实例告诉你一个命令的具体用法。<br>具体可以看cheat的<a href=\"https://github.com/cheat/cheat\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><p>目录查看<br><code>pwd</code> —— print name of current/working directory 显示当前目录名称<br><code>cd</code> —— change the shell working directory 更改当前目录操作<br>cd常见用法：</p>\n<ul>\n<li><code>cd+目录路径</code>进入指定目录</li>\n<li><code>cd + -</code>返回上一次工作目录</li>\n<li><code>cd + ~</code>进入当前用户的家目录</li>\n<li><code>cd + ..</code>返回上一层目录</li>\n</ul>\n<p><code>ls</code> —— list directory contents 查看当前目录下的文件<br>ls常用参数：</p>\n<ul>\n<li><code>ls -a</code> 全部（all）列举目录中的全部文件，包括隐藏文件（.filename）。</li>\n<li><code>ls -l 或者 ll</code> 列举目录内容的细节。</li>\n<li><code>ls -F</code> 文件类型（File type）。在每一个列举项目之后添加一个符号。这些符号包括：/ 表明是一个目录；@ 表明是到其它文件的符号链接；* 表明是一个可执行文件。</li>\n<li><code>ls -r</code>逆向（reverse）。从后向前地列举目录中的内容。</li>\n<li><code>ls -R</code>递归（recursive）。该选项递归地列举所有目录（在当前目录之下）的内容。</li>\n<li><code>ls -S</code>大小（size）。按文件大小排序。</li>\n</ul>\n<p>目录的创建与删除<br><code>mkdir</code> —— 用来创建指定名称的目录</p>\n<ul>\n<li><code>mkdir -p</code> parents 若所建立的上层目录目前尚未建立，则会一并建立上层目录；</li>\n</ul>\n<p><code>rm</code> —— 删除（remove）</p>\n<ul>\n<li><code>rm -d</code> directory删除目录，目录中没有内容。</li>\n<li><code>rm -f</code> force略过不存在的文件，不显示任何信息，强制删除。</li>\n<li><code>rm -r/R</code> recursive同时删除该目录下的所有目录层。</li>\n</ul>\n<p>目录的复制、移动和重命名<br><code>cp</code> —— 复制（copy）</p>\n<ul>\n<li><code>cp -i</code>询问，如果目标文件已经存在，则会询问是否覆盖。</li>\n<li><code>cp -l</code>：把目标文件建立为源文件的硬链接文件，而不是复制源文件。</li>\n<li><code>cp -s</code>：把目标文件建立为源文件的软链接文件，而不是复制源文件。</li>\n<li><code>cp -p</code>：复制后目标文件保留源文件的属性（包括所有者、所属组、权限和时间）。</li>\n<li><code>cp -r</code>：递归复制，用于复制目录。</li>\n</ul>\n<p><code>move</code> —— 移动move（改名）</p>\n<ul>\n<li><code>move -b</code>若需覆盖文件，则覆盖前先行备份。</li>\n<li><code>move -f</code>force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>\n<li><code>move -i</code>若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>\n<li><code>move -u</code>若目标文件已经存在，且 source 比较新，才会更新(update)<br>也可以用move来重命名，如果目标文件和源文件在同一目录下，就可以用move来重命名 <code>move 目标文件 新文件名</code>。</li>\n</ul>\n<p>文件查看<br><code>tail</code> —— 用于显示指定文件末尾内容，一般用于查看日志。</p>\n<ul>\n<li><code>tail -f</code>实时监听文件变化。</li>\n<li><code>tail -n &lt;number&gt;</code>显示行数。</li>\n</ul>\n<p><code>head</code> —— 与tail相对应，用于显示指定文件开头内容。</p>\n<ul>\n<li><code>head -n &lt;number&gt;</code>显示行数。</li>\n</ul>\n<p><code>more</code> 和 <code>less</code> 这两个命令相似，都是用来查看内容比较多的文件。more命令，可以按Enter键向下逐行滚动查看，按空格键可以向下翻一屏，按b键向上翻一屏，按q键退出并返回原来的命令环境。more不能逐行向上滚动查看，而less可以，我们可以把less看做more的升级版，正所谓less is more。less可以按键盘上下方向键显示上下内容，less不必读整个文件，加载速度会比more更快。less退出后shell不会留下刚显示的内容,而more退出后会在shell上留下刚显示的内容。less可以用/和？进行向下搜索和向上搜索</p>\n<p><code>cat</code> —— 查看文件内容</p>\n<ul>\n<li><code>cat file1 file &gt; file</code>可以将多个文件合并成一个文件。   </li>\n</ul>\n<p>文件创建<br><code>touch</code> —— 一是可以来创建文件，二是可以用来修改时间戳。</p>\n<ul>\n<li><code>touch 文件名</code> 如果没有文件将创建一个文件。</li>\n<li><code>touch -d</code> 使用指定的日期时间，而非现在的时间。</li>\n<li><code>touch -t</code> 与-d功能相同，只是格式不同。</li>\n<li><code>touch -r</code> 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同。</li>\n</ul>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><p>Linux有两种，一种是rpm是CentOS体系，一种是deb是Ubuntu体系。<br>分别用 <code>rpm -i</code> 和 <code>dpkg -i</code> 来进行安装。<br>查看已安装的软件列表用 <code>rpm -qa</code> 和 <code>dpkg -l</code>。<br>而删除软件用 <code>rpm -e</code> 和 <code>dpkg -r</code>命令。</p>\n<p>Linux也有自己的软件管家，CentOS下面是yum，Ubuntu下是apt-get</p>\n<h3 id=\"文件的打包与压缩\"><a href=\"#文件的打包与压缩\" class=\"headerlink\" title=\"文件的打包与压缩\"></a>文件的打包与压缩</h3><p><code>tar</code>——打包，将所有文件整合成一个文件，方便拷贝或者移动，但并不会压缩。</p>\n<ul>\n<li><code>tar -c</code> 建立打包</li>\n<li><code>tar -x</code> 解压</li>\n<li><code>tar -t</code> 查看内容</li>\n<li><code>tar -r</code> 向压缩归档文件末尾追加文件</li>\n<li><code>tar -u</code> 更新原压缩包中的文件</li>\n</ul>\n<p>在Linux下可以用<code>gzip</code>和<code>bzip2</code>两个主要命令对文件进行压缩。一般都会和tar命令组合使用<br>bzip2的压缩比率要比gzip的高。</p>\n<ul>\n<li><code>-z</code>用gzip的压缩方式</li>\n<li><code>-j</code>用bz2的压缩方式</li>\n<li><code>-v</code>显示所有过程</li>\n</ul>\n<p>切记 <strong><code>-f</code></strong> 是必须的</p>\n<ul>\n<li><code>-f</code>使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</li>\n</ul>\n<h3 id=\"文件与命令的查找\"><a href=\"#文件与命令的查找\" class=\"headerlink\" title=\"文件与命令的查找\"></a>文件与命令的查找</h3><p><code>find</code> 最强大的查找命令，可以用来查找任何文件。<br><code>find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;</code></p>\n<ul>\n<li>&lt;指定目录&gt;： 所要搜索的目录及其所有子目录。默认为当前目录。</li>\n<li>&lt;指定条件&gt;： 所要搜索的文件的特征。</li>\n<li>&lt;指定动作&gt;： 对搜索结果进行特定的处理。</li>\n</ul>\n<p><code>locate</code> 它要比find搜索快得多，因为它不搜索任何目录，而去搜索一个数据库，这个数据库中含有本地所有文件信息。但是这个数据库每天更新一次会导致查不到最新变动过的文件。要避免这个问题，可以在使用locate之前先使用 <strong><code>updatedb</code></strong> 命令来手动更新数据库。</p>\n<p><code>whereis</code> 该命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p>\n<p><code>which</code> 在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 </p>\n"},{"title":"使用Jest、Enzyme等工具进行单元测试(上)","_content":"\n# Jest\nJest是Facebook开源的测试框架，几乎是0配置直接进行单元测试，相对其他测试框架，其一大特点就是内置了常用的测试工具，比如自带断言、测试覆盖率等工具。Jest还有很多好处这里就不一一介绍了，详情可以到Jest官网查看[https://jestjs.io/](https://jestjs.io/)。  \n\n## Jest 安装\n这里默认安装了node。 如果没有安装的，可自行到Node官网进行下载安装[https://nodejs.org/](https://nodejs.org/)。安装好Node后是默认自带NPM包管理工具的。我们可以通过 `node -v` 和 `npm -v` 来检测node、和npm是否安装成功，如果都成功的显示了版本号，就说明node和npm都安装成功了。下面我们就可以对Jest来进行安装。   \n\nJest的安装十分简单，就一行命令    \n\n`npm install --save-dev jest`   \n\n因为只有在开发的时候我们才去运行测试用例，所以我们在安装Jest的时候加上`--save-dev`。安装完成后我们就可以进行Jest的学习了。\n\n## Jest初体验   \n我们可以根据Jest官网给的简单的例子，来体验一下Jest。   \n\n我们写一个需要被测试的函数，这个函数就是做一个简单的两个数相加的运算然后返回结果。首先我们先创建一个名为 `sum.js` 的js文件:\n```javascript\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n我们用module.exports将这个函数导出   \n然后我们创建一个名为 `sum.test.js`的js文件，这个文件里写我们真正的测试代码:\n\n```javascript\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n然后我们修改 `package.json` 文件，使得我们输入 `npm test` 的时候就可以运行我们的测试用例:\n```JSON\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n最后我们输入`npm run test`来运行我们的测试用例，并可以看到Jest打印的信息：\n```\nPASS  ./sum.test.js\n✓ adds 1 + 2 to equal 3 (5ms)\n```\n至此我们就成功的用Jest写了第一个测试用例。\n\n我们可以看到这段测试代码的核心就两条语句\n1. 调用一个test方法，第一个参数是对这个测试用例的描述，第二参数是一个回调函数，里面是具体的测试方法。\n2. `expect(resultValue).toBe(actualValue)` 这行代码，我们可以看做，当expect方法中的传入的这个值和toBe这个方法中的值完全相等。这条测试用例就算通过（例子中，resultValue是调用sum函数的返回值，actualValue是我们认为函数运行正确应该返回的值）\n\n我们可以简单地试着实现一下这两行代码，这样能更好的理解。\n\n```javascript\nfunction expect(resultValue) { //函数的返回值\n  return {\n    //返回一个对象，其中有toBe方法，toBe方法接收真实值。\n    toBe: function(actualValue) {\n      //判断函数的返回值，与真实值是否相等，如果不相等，抛出错误。\n      if (resultValue !== actualValue) {\n        throw new Error('Error');\n      }\n    }\n  }\n}\n\nfunction test(description: string, fn: Function) {\n  try {\n    fn(); //执行函数fn，如果没有抛出错误，输出PASS\n    console.log(`PASS`); \n  } catch(e) {\n    //如果fn抛出错误，将在这里捕获，并输出错误信息。\n    console.log(`${description} : ${e}`)\n  }\n}\n```\n\n我们可以简单的理解为，`expect(resultValue).toBe(actualValue)` 就是对上述代码的简化。它的实质其实就是比较。expect函数中resultValue和toBe函数中actualValue是否完全相等。之后会介绍Jest中更多的方法。\n\n## 配置你的Jest\n首先 我们输入下面命令，来生成Jest的配置文件。\n`npx jest --init`   \n> 注意，我们这里使用的是npx，不是npm，npx的意思是运行的时候，会到 `node_modules/.bin` 路径和环境变量  `$PATH` 里面，检查命令是否存在。 而不是去全局环境查找命令。\n\n输入完命令后会有几个问题让你回答，来创建基本的配置文件。\n```\nWould you like to use Jest when running \"test\" script in \"package.json\"? › (Y/n)\n这个就是帮你配置package.json当，npm test的时候执行Jest。\n\nChoose the test environment that will be used for testing › - Use arrow-keys. Return to submit.\n❯   node\n    jsdom (browser-like)\n选择node环境还是浏览器环境\n\nDo you want Jest to add coverage reports? › (y/N)\n是否增加测试覆盖率报告\n\nAutomatically clear mock calls and instances between every test? › (y/N)\n每次运行测试时自动清除所有mock\n```\n\n回答完问题之后，会生成一个 `jest.config.js` 的配置文件。我们可以在里面进行Jest更多的配置。我们将会在之后专门来讲Jest的配置，以及通过babel支持TypeScript和ES Modules。   \n\n## Jest Matchers 常用匹配器   \n匹配器（Matchers）是Jest中非常重要的一个概念，它可以提供很多种方式来让你去验证你所测试的返回值\n\n### Truthiness\n* `toBe` 匹配器：相当于 Object.is 或者 ===\n* `toEqual` 匹配器： 只匹配内容，不匹配引用。\n* `toBeNull` 匹配器： 内容是否等于Null\n* `toBeUndefined` 匹配器： 内容是否等于undefined\n* `toBeDefined` 匹配器： 希望内容是定义过的。\n* `toBeTruthy` 匹配器： 内容是否为true。\n* `toBeFalsy` 匹配器： 内容是否为false。\n* `not` 匹配器： 在其他匹配器之前，相当于取反操作   \n\n### 与数字相关\n* `toBeGreaterThan` 匹配器： 输入的数字是否大于\n* `toBeGreaterThanOrEqual`  匹配器： 输入的数字是否大于等于\n* `toBeLessThan` 匹配器： 输入的数字是否小于\n* `toBeLessThanOrEqual`  匹配器： 输入的数字是否小于等于\n* 对于浮点数判断相等，为了解决浮点数的bug。要用`toBeCloseTo`匹配器。   \n\n### 与String相关\n* `toMatch` 匹配器： 结果中是否包含内容，可以是String也可以是正则   \n\n### 与Array相关\n* `toContain` 匹配器： 判断元素是否存在数组中。   \n\n### 与异常相关\n* 用`toThrow`匹配器来判断在调用一个函数出现异常时，这个函数是否抛出了异常。   \n\n\n## Jest测试异步函数\n\n### callback\n我们先看下面的测试用例\n\n```javascript\ntest('testing asynchronous code', () => {\n  function callback(data) {\n    expect(data).toBe('success');\n  }\n\n  fetchData(callback);\n});\n```\n在上面这个函数中，fetchData是一个异步的方法，去请求数据，当数据返回时调用，callback函数。我们期望这个异步函数的返回值是”success“。但是Jest并不知道这个异步函数什么时候返回。Jest仅仅只是从头执行到尾。这样这个测试用例是无效的。\n\n为了解决这个问题。Jest提供了一个 `done` 参数，这个参数通过test函数的回调方法传进去，`done` 是一个不接受任何参数的方法。具体怎么用我们来看代码\n\n\n```javascript\ntest('testing asynchronous code with done', done => {\n  function callback(data) {\n    expect(data).toBe('success');\n    done();\n  }\n\n  fetchData(callback);\n})\n```\n我们对比两个代码可以看出，下面这块代买仅仅是在回调函数中多执行了一句`done()`它的意思就是告诉Jest，只有运行到了`done()`这个命令的时候，这个test才算完事。如果一直不调用`done()`的话会报出超时错误。\n但是这里还有点问题。就是当测试不通过的时候，会到的done不被调用。这时我们还需要改写一下代码，用try/catch 来捕获expect错误从而实现我们这个需求。\n\n```javascript\n  test('testing asynchronous code with done', done => {\n    function callback(data) {\n      try {\n        expect(data).toBe('success');\n        done();\n      } catch (e) {\n        done(e);\n      }\n    }\n\n    fetchData(callback);\n  })\n```\n\n### Promises\n如果使用Promise，会简单很多。我们只需要把 promise返回， Jest会等待promise resolve。 如果  rejected 的话，这条测试用例会自动不通过。代码如下。\n\n```JavaScript\ntest('testing asynchronous code', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('success');\n  });\n});\n```\n\n如果你用catch捕获了rejected。 那就一定要添加assertions匹配器，assertions匹配器接收一个参数，这个参数表示expect的次数，如果没有出现指定的次数，就会报错。我们改写一下上面的方法。\n\n```javascript\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(e => expect(e).toMatch('error'));\n});\n```\n\n### resolves / rejects 匹配器\n我们也可以用 resolves和rejects匹配器。我们直接看代码\n\n```javascript\ntest('testing asynchronous code', () => {\n  return expect(fetchData()).resolves.toBe('success');\n});\n\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n### Async/Await\n最后我们可以用，Await来等待异步函数执行完成，我们只需要把test中的回调函数改写成async/await形式即可。\n\n```javascript\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (e) {\n    expect(e).toMatch('error');\n  }\n});\n```\n\n至此我们简单的介绍了Jest的基本用法。更多的用法我们会在下节讲到。","source":"_posts/使用Jest、Enzyme等工具进行单元测试(上).md","raw":"---\ntitle: 使用Jest、Enzyme等工具进行单元测试(上)\n---\n\n# Jest\nJest是Facebook开源的测试框架，几乎是0配置直接进行单元测试，相对其他测试框架，其一大特点就是内置了常用的测试工具，比如自带断言、测试覆盖率等工具。Jest还有很多好处这里就不一一介绍了，详情可以到Jest官网查看[https://jestjs.io/](https://jestjs.io/)。  \n\n## Jest 安装\n这里默认安装了node。 如果没有安装的，可自行到Node官网进行下载安装[https://nodejs.org/](https://nodejs.org/)。安装好Node后是默认自带NPM包管理工具的。我们可以通过 `node -v` 和 `npm -v` 来检测node、和npm是否安装成功，如果都成功的显示了版本号，就说明node和npm都安装成功了。下面我们就可以对Jest来进行安装。   \n\nJest的安装十分简单，就一行命令    \n\n`npm install --save-dev jest`   \n\n因为只有在开发的时候我们才去运行测试用例，所以我们在安装Jest的时候加上`--save-dev`。安装完成后我们就可以进行Jest的学习了。\n\n## Jest初体验   \n我们可以根据Jest官网给的简单的例子，来体验一下Jest。   \n\n我们写一个需要被测试的函数，这个函数就是做一个简单的两个数相加的运算然后返回结果。首先我们先创建一个名为 `sum.js` 的js文件:\n```javascript\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n```\n我们用module.exports将这个函数导出   \n然后我们创建一个名为 `sum.test.js`的js文件，这个文件里写我们真正的测试代码:\n\n```javascript\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n然后我们修改 `package.json` 文件，使得我们输入 `npm test` 的时候就可以运行我们的测试用例:\n```JSON\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n最后我们输入`npm run test`来运行我们的测试用例，并可以看到Jest打印的信息：\n```\nPASS  ./sum.test.js\n✓ adds 1 + 2 to equal 3 (5ms)\n```\n至此我们就成功的用Jest写了第一个测试用例。\n\n我们可以看到这段测试代码的核心就两条语句\n1. 调用一个test方法，第一个参数是对这个测试用例的描述，第二参数是一个回调函数，里面是具体的测试方法。\n2. `expect(resultValue).toBe(actualValue)` 这行代码，我们可以看做，当expect方法中的传入的这个值和toBe这个方法中的值完全相等。这条测试用例就算通过（例子中，resultValue是调用sum函数的返回值，actualValue是我们认为函数运行正确应该返回的值）\n\n我们可以简单地试着实现一下这两行代码，这样能更好的理解。\n\n```javascript\nfunction expect(resultValue) { //函数的返回值\n  return {\n    //返回一个对象，其中有toBe方法，toBe方法接收真实值。\n    toBe: function(actualValue) {\n      //判断函数的返回值，与真实值是否相等，如果不相等，抛出错误。\n      if (resultValue !== actualValue) {\n        throw new Error('Error');\n      }\n    }\n  }\n}\n\nfunction test(description: string, fn: Function) {\n  try {\n    fn(); //执行函数fn，如果没有抛出错误，输出PASS\n    console.log(`PASS`); \n  } catch(e) {\n    //如果fn抛出错误，将在这里捕获，并输出错误信息。\n    console.log(`${description} : ${e}`)\n  }\n}\n```\n\n我们可以简单的理解为，`expect(resultValue).toBe(actualValue)` 就是对上述代码的简化。它的实质其实就是比较。expect函数中resultValue和toBe函数中actualValue是否完全相等。之后会介绍Jest中更多的方法。\n\n## 配置你的Jest\n首先 我们输入下面命令，来生成Jest的配置文件。\n`npx jest --init`   \n> 注意，我们这里使用的是npx，不是npm，npx的意思是运行的时候，会到 `node_modules/.bin` 路径和环境变量  `$PATH` 里面，检查命令是否存在。 而不是去全局环境查找命令。\n\n输入完命令后会有几个问题让你回答，来创建基本的配置文件。\n```\nWould you like to use Jest when running \"test\" script in \"package.json\"? › (Y/n)\n这个就是帮你配置package.json当，npm test的时候执行Jest。\n\nChoose the test environment that will be used for testing › - Use arrow-keys. Return to submit.\n❯   node\n    jsdom (browser-like)\n选择node环境还是浏览器环境\n\nDo you want Jest to add coverage reports? › (y/N)\n是否增加测试覆盖率报告\n\nAutomatically clear mock calls and instances between every test? › (y/N)\n每次运行测试时自动清除所有mock\n```\n\n回答完问题之后，会生成一个 `jest.config.js` 的配置文件。我们可以在里面进行Jest更多的配置。我们将会在之后专门来讲Jest的配置，以及通过babel支持TypeScript和ES Modules。   \n\n## Jest Matchers 常用匹配器   \n匹配器（Matchers）是Jest中非常重要的一个概念，它可以提供很多种方式来让你去验证你所测试的返回值\n\n### Truthiness\n* `toBe` 匹配器：相当于 Object.is 或者 ===\n* `toEqual` 匹配器： 只匹配内容，不匹配引用。\n* `toBeNull` 匹配器： 内容是否等于Null\n* `toBeUndefined` 匹配器： 内容是否等于undefined\n* `toBeDefined` 匹配器： 希望内容是定义过的。\n* `toBeTruthy` 匹配器： 内容是否为true。\n* `toBeFalsy` 匹配器： 内容是否为false。\n* `not` 匹配器： 在其他匹配器之前，相当于取反操作   \n\n### 与数字相关\n* `toBeGreaterThan` 匹配器： 输入的数字是否大于\n* `toBeGreaterThanOrEqual`  匹配器： 输入的数字是否大于等于\n* `toBeLessThan` 匹配器： 输入的数字是否小于\n* `toBeLessThanOrEqual`  匹配器： 输入的数字是否小于等于\n* 对于浮点数判断相等，为了解决浮点数的bug。要用`toBeCloseTo`匹配器。   \n\n### 与String相关\n* `toMatch` 匹配器： 结果中是否包含内容，可以是String也可以是正则   \n\n### 与Array相关\n* `toContain` 匹配器： 判断元素是否存在数组中。   \n\n### 与异常相关\n* 用`toThrow`匹配器来判断在调用一个函数出现异常时，这个函数是否抛出了异常。   \n\n\n## Jest测试异步函数\n\n### callback\n我们先看下面的测试用例\n\n```javascript\ntest('testing asynchronous code', () => {\n  function callback(data) {\n    expect(data).toBe('success');\n  }\n\n  fetchData(callback);\n});\n```\n在上面这个函数中，fetchData是一个异步的方法，去请求数据，当数据返回时调用，callback函数。我们期望这个异步函数的返回值是”success“。但是Jest并不知道这个异步函数什么时候返回。Jest仅仅只是从头执行到尾。这样这个测试用例是无效的。\n\n为了解决这个问题。Jest提供了一个 `done` 参数，这个参数通过test函数的回调方法传进去，`done` 是一个不接受任何参数的方法。具体怎么用我们来看代码\n\n\n```javascript\ntest('testing asynchronous code with done', done => {\n  function callback(data) {\n    expect(data).toBe('success');\n    done();\n  }\n\n  fetchData(callback);\n})\n```\n我们对比两个代码可以看出，下面这块代买仅仅是在回调函数中多执行了一句`done()`它的意思就是告诉Jest，只有运行到了`done()`这个命令的时候，这个test才算完事。如果一直不调用`done()`的话会报出超时错误。\n但是这里还有点问题。就是当测试不通过的时候，会到的done不被调用。这时我们还需要改写一下代码，用try/catch 来捕获expect错误从而实现我们这个需求。\n\n```javascript\n  test('testing asynchronous code with done', done => {\n    function callback(data) {\n      try {\n        expect(data).toBe('success');\n        done();\n      } catch (e) {\n        done(e);\n      }\n    }\n\n    fetchData(callback);\n  })\n```\n\n### Promises\n如果使用Promise，会简单很多。我们只需要把 promise返回， Jest会等待promise resolve。 如果  rejected 的话，这条测试用例会自动不通过。代码如下。\n\n```JavaScript\ntest('testing asynchronous code', () => {\n  return fetchData().then(data => {\n    expect(data).toBe('success');\n  });\n});\n```\n\n如果你用catch捕获了rejected。 那就一定要添加assertions匹配器，assertions匹配器接收一个参数，这个参数表示expect的次数，如果没有出现指定的次数，就会报错。我们改写一下上面的方法。\n\n```javascript\ntest('the fetch fails with an error', () => {\n  expect.assertions(1);\n  return fetchData().catch(e => expect(e).toMatch('error'));\n});\n```\n\n### resolves / rejects 匹配器\n我们也可以用 resolves和rejects匹配器。我们直接看代码\n\n```javascript\ntest('testing asynchronous code', () => {\n  return expect(fetchData()).resolves.toBe('success');\n});\n\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n### Async/Await\n最后我们可以用，Await来等待异步函数执行完成，我们只需要把test中的回调函数改写成async/await形式即可。\n\n```javascript\ntest('the data is peanut butter', async () => {\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (e) {\n    expect(e).toMatch('error');\n  }\n});\n```\n\n至此我们简单的介绍了Jest的基本用法。更多的用法我们会在下节讲到。","slug":"使用Jest、Enzyme等工具进行单元测试(上)","published":1,"date":"2020-03-05T13:02:56.000Z","updated":"2020-03-09T01:22:04.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lakavf000r9ko73dx86u4z","content":"<h1 id=\"Jest\"><a href=\"#Jest\" class=\"headerlink\" title=\"Jest\"></a>Jest</h1><p>Jest是Facebook开源的测试框架，几乎是0配置直接进行单元测试，相对其他测试框架，其一大特点就是内置了常用的测试工具，比如自带断言、测试覆盖率等工具。Jest还有很多好处这里就不一一介绍了，详情可以到Jest官网查看<a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a>。  </p>\n<h2 id=\"Jest-安装\"><a href=\"#Jest-安装\" class=\"headerlink\" title=\"Jest 安装\"></a>Jest 安装</h2><p>这里默认安装了node。 如果没有安装的，可自行到Node官网进行下载安装<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/</a>。安装好Node后是默认自带NPM包管理工具的。我们可以通过 <code>node -v</code> 和 <code>npm -v</code> 来检测node、和npm是否安装成功，如果都成功的显示了版本号，就说明node和npm都安装成功了。下面我们就可以对Jest来进行安装。   </p>\n<p>Jest的安装十分简单，就一行命令    </p>\n<p><code>npm install --save-dev jest</code>   </p>\n<p>因为只有在开发的时候我们才去运行测试用例，所以我们在安装Jest的时候加上<code>--save-dev</code>。安装完成后我们就可以进行Jest的学习了。</p>\n<h2 id=\"Jest初体验\"><a href=\"#Jest初体验\" class=\"headerlink\" title=\"Jest初体验\"></a>Jest初体验</h2><p>我们可以根据Jest官网给的简单的例子，来体验一下Jest。   </p>\n<p>我们写一个需要被测试的函数，这个函数就是做一个简单的两个数相加的运算然后返回结果。首先我们先创建一个名为 <code>sum.js</code> 的js文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sum;</span><br></pre></td></tr></table></figure></p>\n<p>我们用module.exports将这个函数导出<br>然后我们创建一个名为 <code>sum.test.js</code>的js文件，这个文件里写我们真正的测试代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"built_in\">require</span>(<span class=\"string\">'./sum'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'adds 1 + 2 to equal 3'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后我们修改 <code>package.json</code> 文件，使得我们输入 <code>npm test</code> 的时候就可以运行我们的测试用例:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"jest\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后我们输入<code>npm run test</code>来运行我们的测试用例，并可以看到Jest打印的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PASS  ./sum.test.js</span><br><span class=\"line\">✓ adds 1 + 2 to equal 3 (5ms)</span><br></pre></td></tr></table></figure></p>\n<p>至此我们就成功的用Jest写了第一个测试用例。</p>\n<p>我们可以看到这段测试代码的核心就两条语句</p>\n<ol>\n<li>调用一个test方法，第一个参数是对这个测试用例的描述，第二参数是一个回调函数，里面是具体的测试方法。</li>\n<li><code>expect(resultValue).toBe(actualValue)</code> 这行代码，我们可以看做，当expect方法中的传入的这个值和toBe这个方法中的值完全相等。这条测试用例就算通过（例子中，resultValue是调用sum函数的返回值，actualValue是我们认为函数运行正确应该返回的值）</li>\n</ol>\n<p>我们可以简单地试着实现一下这两行代码，这样能更好的理解。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">expect</span>(<span class=\"params\">resultValue</span>) </span>&#123; <span class=\"comment\">//函数的返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回一个对象，其中有toBe方法，toBe方法接收真实值。</span></span><br><span class=\"line\">    toBe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">actualValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//判断函数的返回值，与真实值是否相等，如果不相等，抛出错误。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (resultValue !== actualValue) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Error'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">description: string, fn: Function</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    fn(); <span class=\"comment\">//执行函数fn，如果没有抛出错误，输出PASS</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`PASS`</span>); </span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果fn抛出错误，将在这里捕获，并输出错误信息。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;description&#125;</span> : <span class=\"subst\">$&#123;e&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以简单的理解为，<code>expect(resultValue).toBe(actualValue)</code> 就是对上述代码的简化。它的实质其实就是比较。expect函数中resultValue和toBe函数中actualValue是否完全相等。之后会介绍Jest中更多的方法。</p>\n<h2 id=\"配置你的Jest\"><a href=\"#配置你的Jest\" class=\"headerlink\" title=\"配置你的Jest\"></a>配置你的Jest</h2><p>首先 我们输入下面命令，来生成Jest的配置文件。<br><code>npx jest --init</code>   </p>\n<blockquote>\n<p>注意，我们这里使用的是npx，不是npm，npx的意思是运行的时候，会到 <code>node_modules/.bin</code> 路径和环境变量  <code>$PATH</code> 里面，检查命令是否存在。 而不是去全局环境查找命令。</p>\n</blockquote>\n<p>输入完命令后会有几个问题让你回答，来创建基本的配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Would you like to use Jest when running &quot;test&quot; script in &quot;package.json&quot;? › (Y/n)</span><br><span class=\"line\">这个就是帮你配置package.json当，npm test的时候执行Jest。</span><br><span class=\"line\"></span><br><span class=\"line\">Choose the test environment that will be used for testing › - Use arrow-keys. Return to submit.</span><br><span class=\"line\">❯   node</span><br><span class=\"line\">    jsdom (browser-like)</span><br><span class=\"line\">选择node环境还是浏览器环境</span><br><span class=\"line\"></span><br><span class=\"line\">Do you want Jest to add coverage reports? › (y/N)</span><br><span class=\"line\">是否增加测试覆盖率报告</span><br><span class=\"line\"></span><br><span class=\"line\">Automatically clear mock calls and instances between every test? › (y/N)</span><br><span class=\"line\">每次运行测试时自动清除所有mock</span><br></pre></td></tr></table></figure></p>\n<p>回答完问题之后，会生成一个 <code>jest.config.js</code> 的配置文件。我们可以在里面进行Jest更多的配置。我们将会在之后专门来讲Jest的配置，以及通过babel支持TypeScript和ES Modules。   </p>\n<h2 id=\"Jest-Matchers-常用匹配器\"><a href=\"#Jest-Matchers-常用匹配器\" class=\"headerlink\" title=\"Jest Matchers 常用匹配器\"></a>Jest Matchers 常用匹配器</h2><p>匹配器（Matchers）是Jest中非常重要的一个概念，它可以提供很多种方式来让你去验证你所测试的返回值</p>\n<h3 id=\"Truthiness\"><a href=\"#Truthiness\" class=\"headerlink\" title=\"Truthiness\"></a>Truthiness</h3><ul>\n<li><code>toBe</code> 匹配器：相当于 Object.is 或者 ===</li>\n<li><code>toEqual</code> 匹配器： 只匹配内容，不匹配引用。</li>\n<li><code>toBeNull</code> 匹配器： 内容是否等于Null</li>\n<li><code>toBeUndefined</code> 匹配器： 内容是否等于undefined</li>\n<li><code>toBeDefined</code> 匹配器： 希望内容是定义过的。</li>\n<li><code>toBeTruthy</code> 匹配器： 内容是否为true。</li>\n<li><code>toBeFalsy</code> 匹配器： 内容是否为false。</li>\n<li><code>not</code> 匹配器： 在其他匹配器之前，相当于取反操作   </li>\n</ul>\n<h3 id=\"与数字相关\"><a href=\"#与数字相关\" class=\"headerlink\" title=\"与数字相关\"></a>与数字相关</h3><ul>\n<li><code>toBeGreaterThan</code> 匹配器： 输入的数字是否大于</li>\n<li><code>toBeGreaterThanOrEqual</code>  匹配器： 输入的数字是否大于等于</li>\n<li><code>toBeLessThan</code> 匹配器： 输入的数字是否小于</li>\n<li><code>toBeLessThanOrEqual</code>  匹配器： 输入的数字是否小于等于</li>\n<li>对于浮点数判断相等，为了解决浮点数的bug。要用<code>toBeCloseTo</code>匹配器。   </li>\n</ul>\n<h3 id=\"与String相关\"><a href=\"#与String相关\" class=\"headerlink\" title=\"与String相关\"></a>与String相关</h3><ul>\n<li><code>toMatch</code> 匹配器： 结果中是否包含内容，可以是String也可以是正则   </li>\n</ul>\n<h3 id=\"与Array相关\"><a href=\"#与Array相关\" class=\"headerlink\" title=\"与Array相关\"></a>与Array相关</h3><ul>\n<li><code>toContain</code> 匹配器： 判断元素是否存在数组中。   </li>\n</ul>\n<h3 id=\"与异常相关\"><a href=\"#与异常相关\" class=\"headerlink\" title=\"与异常相关\"></a>与异常相关</h3><ul>\n<li>用<code>toThrow</code>匹配器来判断在调用一个函数出现异常时，这个函数是否抛出了异常。   </li>\n</ul>\n<h2 id=\"Jest测试异步函数\"><a href=\"#Jest测试异步函数\" class=\"headerlink\" title=\"Jest测试异步函数\"></a>Jest测试异步函数</h2><h3 id=\"callback\"><a href=\"#callback\" class=\"headerlink\" title=\"callback\"></a>callback</h3><p>我们先看下面的测试用例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面这个函数中，fetchData是一个异步的方法，去请求数据，当数据返回时调用，callback函数。我们期望这个异步函数的返回值是”success“。但是Jest并不知道这个异步函数什么时候返回。Jest仅仅只是从头执行到尾。这样这个测试用例是无效的。</p>\n<p>为了解决这个问题。Jest提供了一个 <code>done</code> 参数，这个参数通过test函数的回调方法传进去，<code>done</code> 是一个不接受任何参数的方法。具体怎么用我们来看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code with done'</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们对比两个代码可以看出，下面这块代买仅仅是在回调函数中多执行了一句<code>done()</code>它的意思就是告诉Jest，只有运行到了<code>done()</code>这个命令的时候，这个test才算完事。如果一直不调用<code>done()</code>的话会报出超时错误。<br>但是这里还有点问题。就是当测试不通过的时候，会到的done不被调用。这时我们还需要改写一下代码，用try/catch 来捕获expect错误从而实现我们这个需求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code with done'</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      done(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h3><p>如果使用Promise，会简单很多。我们只需要把 promise返回， Jest会等待promise resolve。 如果  rejected 的话，这条测试用例会自动不通过。代码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你用catch捕获了rejected。 那就一定要添加assertions匹配器，assertions匹配器接收一个参数，这个参数表示expect的次数，如果没有出现指定的次数，就会报错。我们改写一下上面的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the fetch fails with an error'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> expect(e).toMatch(<span class=\"string\">'error'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"resolves-rejects-匹配器\"><a href=\"#resolves-rejects-匹配器\" class=\"headerlink\" title=\"resolves / rejects 匹配器\"></a>resolves / rejects 匹配器</h3><p>我们也可以用 resolves和rejects匹配器。我们直接看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expect(fetchData()).resolves.toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'the fetch fails with an error'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expect(fetchData()).rejects.toMatch(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async/Await\"></a>Async/Await</h3><p>最后我们可以用，Await来等待异步函数执行完成，我们只需要把test中的回调函数改写成async/await形式即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  expect(data).toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'the fetch fails with an error'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    expect(e).toMatch(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>至此我们简单的介绍了Jest的基本用法。更多的用法我们会在下节讲到。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jest\"><a href=\"#Jest\" class=\"headerlink\" title=\"Jest\"></a>Jest</h1><p>Jest是Facebook开源的测试框架，几乎是0配置直接进行单元测试，相对其他测试框架，其一大特点就是内置了常用的测试工具，比如自带断言、测试覆盖率等工具。Jest还有很多好处这里就不一一介绍了，详情可以到Jest官网查看<a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a>。  </p>\n<h2 id=\"Jest-安装\"><a href=\"#Jest-安装\" class=\"headerlink\" title=\"Jest 安装\"></a>Jest 安装</h2><p>这里默认安装了node。 如果没有安装的，可自行到Node官网进行下载安装<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/</a>。安装好Node后是默认自带NPM包管理工具的。我们可以通过 <code>node -v</code> 和 <code>npm -v</code> 来检测node、和npm是否安装成功，如果都成功的显示了版本号，就说明node和npm都安装成功了。下面我们就可以对Jest来进行安装。   </p>\n<p>Jest的安装十分简单，就一行命令    </p>\n<p><code>npm install --save-dev jest</code>   </p>\n<p>因为只有在开发的时候我们才去运行测试用例，所以我们在安装Jest的时候加上<code>--save-dev</code>。安装完成后我们就可以进行Jest的学习了。</p>\n<h2 id=\"Jest初体验\"><a href=\"#Jest初体验\" class=\"headerlink\" title=\"Jest初体验\"></a>Jest初体验</h2><p>我们可以根据Jest官网给的简单的例子，来体验一下Jest。   </p>\n<p>我们写一个需要被测试的函数，这个函数就是做一个简单的两个数相加的运算然后返回结果。首先我们先创建一个名为 <code>sum.js</code> 的js文件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sum;</span><br></pre></td></tr></table></figure></p>\n<p>我们用module.exports将这个函数导出<br>然后我们创建一个名为 <code>sum.test.js</code>的js文件，这个文件里写我们真正的测试代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"built_in\">require</span>(<span class=\"string\">'./sum'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'adds 1 + 2 to equal 3'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后我们修改 <code>package.json</code> 文件，使得我们输入 <code>npm test</code> 的时候就可以运行我们的测试用例:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"jest\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后我们输入<code>npm run test</code>来运行我们的测试用例，并可以看到Jest打印的信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PASS  ./sum.test.js</span><br><span class=\"line\">✓ adds 1 + 2 to equal 3 (5ms)</span><br></pre></td></tr></table></figure></p>\n<p>至此我们就成功的用Jest写了第一个测试用例。</p>\n<p>我们可以看到这段测试代码的核心就两条语句</p>\n<ol>\n<li>调用一个test方法，第一个参数是对这个测试用例的描述，第二参数是一个回调函数，里面是具体的测试方法。</li>\n<li><code>expect(resultValue).toBe(actualValue)</code> 这行代码，我们可以看做，当expect方法中的传入的这个值和toBe这个方法中的值完全相等。这条测试用例就算通过（例子中，resultValue是调用sum函数的返回值，actualValue是我们认为函数运行正确应该返回的值）</li>\n</ol>\n<p>我们可以简单地试着实现一下这两行代码，这样能更好的理解。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">expect</span>(<span class=\"params\">resultValue</span>) </span>&#123; <span class=\"comment\">//函数的返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回一个对象，其中有toBe方法，toBe方法接收真实值。</span></span><br><span class=\"line\">    toBe: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">actualValue</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//判断函数的返回值，与真实值是否相等，如果不相等，抛出错误。</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (resultValue !== actualValue) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Error'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">description: string, fn: Function</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    fn(); <span class=\"comment\">//执行函数fn，如果没有抛出错误，输出PASS</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`PASS`</span>); </span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果fn抛出错误，将在这里捕获，并输出错误信息。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;description&#125;</span> : <span class=\"subst\">$&#123;e&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以简单的理解为，<code>expect(resultValue).toBe(actualValue)</code> 就是对上述代码的简化。它的实质其实就是比较。expect函数中resultValue和toBe函数中actualValue是否完全相等。之后会介绍Jest中更多的方法。</p>\n<h2 id=\"配置你的Jest\"><a href=\"#配置你的Jest\" class=\"headerlink\" title=\"配置你的Jest\"></a>配置你的Jest</h2><p>首先 我们输入下面命令，来生成Jest的配置文件。<br><code>npx jest --init</code>   </p>\n<blockquote>\n<p>注意，我们这里使用的是npx，不是npm，npx的意思是运行的时候，会到 <code>node_modules/.bin</code> 路径和环境变量  <code>$PATH</code> 里面，检查命令是否存在。 而不是去全局环境查找命令。</p>\n</blockquote>\n<p>输入完命令后会有几个问题让你回答，来创建基本的配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Would you like to use Jest when running &quot;test&quot; script in &quot;package.json&quot;? › (Y/n)</span><br><span class=\"line\">这个就是帮你配置package.json当，npm test的时候执行Jest。</span><br><span class=\"line\"></span><br><span class=\"line\">Choose the test environment that will be used for testing › - Use arrow-keys. Return to submit.</span><br><span class=\"line\">❯   node</span><br><span class=\"line\">    jsdom (browser-like)</span><br><span class=\"line\">选择node环境还是浏览器环境</span><br><span class=\"line\"></span><br><span class=\"line\">Do you want Jest to add coverage reports? › (y/N)</span><br><span class=\"line\">是否增加测试覆盖率报告</span><br><span class=\"line\"></span><br><span class=\"line\">Automatically clear mock calls and instances between every test? › (y/N)</span><br><span class=\"line\">每次运行测试时自动清除所有mock</span><br></pre></td></tr></table></figure></p>\n<p>回答完问题之后，会生成一个 <code>jest.config.js</code> 的配置文件。我们可以在里面进行Jest更多的配置。我们将会在之后专门来讲Jest的配置，以及通过babel支持TypeScript和ES Modules。   </p>\n<h2 id=\"Jest-Matchers-常用匹配器\"><a href=\"#Jest-Matchers-常用匹配器\" class=\"headerlink\" title=\"Jest Matchers 常用匹配器\"></a>Jest Matchers 常用匹配器</h2><p>匹配器（Matchers）是Jest中非常重要的一个概念，它可以提供很多种方式来让你去验证你所测试的返回值</p>\n<h3 id=\"Truthiness\"><a href=\"#Truthiness\" class=\"headerlink\" title=\"Truthiness\"></a>Truthiness</h3><ul>\n<li><code>toBe</code> 匹配器：相当于 Object.is 或者 ===</li>\n<li><code>toEqual</code> 匹配器： 只匹配内容，不匹配引用。</li>\n<li><code>toBeNull</code> 匹配器： 内容是否等于Null</li>\n<li><code>toBeUndefined</code> 匹配器： 内容是否等于undefined</li>\n<li><code>toBeDefined</code> 匹配器： 希望内容是定义过的。</li>\n<li><code>toBeTruthy</code> 匹配器： 内容是否为true。</li>\n<li><code>toBeFalsy</code> 匹配器： 内容是否为false。</li>\n<li><code>not</code> 匹配器： 在其他匹配器之前，相当于取反操作   </li>\n</ul>\n<h3 id=\"与数字相关\"><a href=\"#与数字相关\" class=\"headerlink\" title=\"与数字相关\"></a>与数字相关</h3><ul>\n<li><code>toBeGreaterThan</code> 匹配器： 输入的数字是否大于</li>\n<li><code>toBeGreaterThanOrEqual</code>  匹配器： 输入的数字是否大于等于</li>\n<li><code>toBeLessThan</code> 匹配器： 输入的数字是否小于</li>\n<li><code>toBeLessThanOrEqual</code>  匹配器： 输入的数字是否小于等于</li>\n<li>对于浮点数判断相等，为了解决浮点数的bug。要用<code>toBeCloseTo</code>匹配器。   </li>\n</ul>\n<h3 id=\"与String相关\"><a href=\"#与String相关\" class=\"headerlink\" title=\"与String相关\"></a>与String相关</h3><ul>\n<li><code>toMatch</code> 匹配器： 结果中是否包含内容，可以是String也可以是正则   </li>\n</ul>\n<h3 id=\"与Array相关\"><a href=\"#与Array相关\" class=\"headerlink\" title=\"与Array相关\"></a>与Array相关</h3><ul>\n<li><code>toContain</code> 匹配器： 判断元素是否存在数组中。   </li>\n</ul>\n<h3 id=\"与异常相关\"><a href=\"#与异常相关\" class=\"headerlink\" title=\"与异常相关\"></a>与异常相关</h3><ul>\n<li>用<code>toThrow</code>匹配器来判断在调用一个函数出现异常时，这个函数是否抛出了异常。   </li>\n</ul>\n<h2 id=\"Jest测试异步函数\"><a href=\"#Jest测试异步函数\" class=\"headerlink\" title=\"Jest测试异步函数\"></a>Jest测试异步函数</h2><h3 id=\"callback\"><a href=\"#callback\" class=\"headerlink\" title=\"callback\"></a>callback</h3><p>我们先看下面的测试用例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在上面这个函数中，fetchData是一个异步的方法，去请求数据，当数据返回时调用，callback函数。我们期望这个异步函数的返回值是”success“。但是Jest并不知道这个异步函数什么时候返回。Jest仅仅只是从头执行到尾。这样这个测试用例是无效的。</p>\n<p>为了解决这个问题。Jest提供了一个 <code>done</code> 参数，这个参数通过test函数的回调方法传进去，<code>done</code> 是一个不接受任何参数的方法。具体怎么用我们来看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code with done'</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>我们对比两个代码可以看出，下面这块代买仅仅是在回调函数中多执行了一句<code>done()</code>它的意思就是告诉Jest，只有运行到了<code>done()</code>这个命令的时候，这个test才算完事。如果一直不调用<code>done()</code>的话会报出超时错误。<br>但是这里还有点问题。就是当测试不通过的时候，会到的done不被调用。这时我们还需要改写一下代码，用try/catch 来捕获expect错误从而实现我们这个需求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code with done'</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      done(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData(callback);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h3><p>如果使用Promise，会简单很多。我们只需要把 promise返回， Jest会等待promise resolve。 如果  rejected 的话，这条测试用例会自动不通过。代码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你用catch捕获了rejected。 那就一定要添加assertions匹配器，assertions匹配器接收一个参数，这个参数表示expect的次数，如果没有出现指定的次数，就会报错。我们改写一下上面的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the fetch fails with an error'</span>, () =&gt; &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> expect(e).toMatch(<span class=\"string\">'error'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"resolves-rejects-匹配器\"><a href=\"#resolves-rejects-匹配器\" class=\"headerlink\" title=\"resolves / rejects 匹配器\"></a>resolves / rejects 匹配器</h3><p>我们也可以用 resolves和rejects匹配器。我们直接看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'testing asynchronous code'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expect(fetchData()).resolves.toBe(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'the fetch fails with an error'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expect(fetchData()).rejects.toMatch(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async/Await\"></a>Async/Await</h3><p>最后我们可以用，Await来等待异步函数执行完成，我们只需要把test中的回调函数改写成async/await形式即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'the data is peanut butter'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  expect(data).toBe(<span class=\"string\">'peanut butter'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'the fetch fails with an error'</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    expect(e).toMatch(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>至此我们简单的介绍了Jest的基本用法。更多的用法我们会在下节讲到。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck7lakau900029ko7srhlw75b","category_id":"ck7lakauf00069ko7rrru2biu","_id":"ck7lakauo000d9ko7k30ok9dw"},{"post_id":"ck7lakaui00089ko7va44zfbn","category_id":"ck7lakaum000a9ko7f6el0j8s","_id":"ck7lakauq000g9ko7wek1tj3y"},{"post_id":"ck7lakauj00099ko7b9wbg991","category_id":"ck7lakaup000e9ko74r74kkxt","_id":"ck7lakaur000k9ko73wqdjn3t"},{"post_id":"ck7lakava000q9ko7z515rpn6","category_id":"ck7lakavh000s9ko7cdds1bw3","_id":"ck7lakavi000v9ko7t19l6gnp"}],"PostTag":[{"post_id":"ck7lakau900029ko7srhlw75b","tag_id":"ck7lakauh00079ko7kgbknv3r","_id":"ck7lakauo000c9ko7d1qly9gn"},{"post_id":"ck7lakaui00089ko7va44zfbn","tag_id":"ck7lakaum000b9ko7qmd8k7xq","_id":"ck7lakauq000i9ko71tfksnoe"},{"post_id":"ck7lakaui00089ko7va44zfbn","tag_id":"ck7lakaup000f9ko7y6n3k3b5","_id":"ck7lakaur000j9ko7ltvd0krs"},{"post_id":"ck7lakauj00099ko7b9wbg991","tag_id":"ck7lakauq000h9ko7mysv4juo","_id":"ck7lakaus000n9ko7vn9l0su3"},{"post_id":"ck7lakauj00099ko7b9wbg991","tag_id":"ck7lakaur000l9ko7fku53o4g","_id":"ck7lakaus000o9ko7c9seri64"},{"post_id":"ck7lakauj00099ko7b9wbg991","tag_id":"ck7lakaus000m9ko7rtlyokfj","_id":"ck7lakaut000p9ko7n3obgwx9"},{"post_id":"ck7lakava000q9ko7z515rpn6","tag_id":"ck7lakavi000t9ko7gb1g2ps1","_id":"ck7lakavi000u9ko7r9lvpiu0"}],"Tag":[{"name":"计算机组成原理","_id":"ck7lakauh00079ko7kgbknv3r"},{"name":"Mac技巧","_id":"ck7lakaum000b9ko7qmd8k7xq"},{"name":"终端","_id":"ck7lakaup000f9ko7y6n3k3b5"},{"name":"后端","_id":"ck7lakauq000h9ko7mysv4juo"},{"name":"框架","_id":"ck7lakaur000l9ko7fku53o4g"},{"name":"转载","_id":"ck7lakaus000m9ko7rtlyokfj"},{"name":"Linux","_id":"ck7lakavi000t9ko7gb1g2ps1"}]}}